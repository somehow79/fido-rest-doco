{
	"swagger": "2.0",
	"info": {
		"description": "This is the documentation for IdentityX with support for FIDO UAF v1.0.\n\nLearn about IdentityX at our [website] (http://www.identityx.com).\n\nIdentityX uses api keys to secure access to the services.  To access these services please ensure you have a valid api-key. \n",
		"version": "1.0.0",
		"title": "IdentityX REST API",
		"termsOfService": "http://www.identityx.com/terms/",
		"contact": {
			"name": "apiteam@identityx.com"
		},
		"license": {
			"name": "Commercial license",
			"url": "http://www.identityx.com/licenses/LICENSE-2.0.html"
		}
	},
	"host": "petstore.swagger.wordnik.com",
	"basePath": "/v1",
	"tags": [
		{
			"name": "Application",
			"description": "The application operations"
		},
		{
			"name": "Audit",
			"description": "The audit operations"
		},
		{
			"name": "AuthenticationRequest",
			"description": "The authentication request operations"
		},
		{
			"name": "Authenticator",
			"description": "The authenticator operations"
		},
		{
			"name": "AuthenticatorType",
			"description": "The authenticator type operations"
		},
		{
			"name": "Permission",
			"description": "The permission operations"
		},
		{
			"name": "Policy",
			"description": "The policy operations"
		},
		{
			"name": "Registration",
			"description": "The registration operations"
		},
		{
			"name": "RegistrationChallenge",
			"description": "The registration challenge operations"
		},
		{
			"name": "Role",
			"description": "The role operations"
		},
		{
			"name": "Sponsorship",
			"description": "The sponsorship operations"
		},
		{
			"name": "Tenant",
			"description": "The tenant operations"
		},
		{
			"name": "SystemAuthenticatorType",
			"description": "The system authenticator type operations"
		},
		{
			"name": "Token",
			"description": "The token operations"
		},
		{
			"name": "User",
			"description": "The user operations"
		}
	],
	"schemes": [
		"https"
	],
	"consumes": [
		"application/json"
	],
	"produces": [
		"application/json"
	],
	"paths": {
		"/applications": {
			"get": {
				"tags": [
					"Application"
				],
				"summary": "List Applications",
				"description": "Returns applications from the system",
				"operationId": "getApplications",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "applicationId",
						"description": "Retrieve applications using applicationId as a search field.  This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter applications by status. Allowed values are 'ACTIVE', 'BLOCKED' and 'ARCHIVED'. By default applications with any status are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of applications to be returned in the page.  Default is 20.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.  Default is 1.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned applications are to be sorted.  Allowed values are 'applicationId' and 'created'.  Default value is 'applicationId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the applications to be returned.  Default value is 'true'",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The collection of the applications (or part thereof) which satisfied the search criteria",
						"schema": {
							"$ref": "#/definitions/PageOfApplications"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Application"
				],
				"summary": "Create an Application",
				"description": "Creates a new application in the system. <br/><strong>Note: </strong> Mandatory fields on creation are <code>applicationId</code> and <code>name</code>.",
				"operationId": "addApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Application to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Application"
						}
					}
				],
				"responses": {
					"201": {
						"description": "New application successfully created",
						"schema": {
							"$ref": "#/definitions/Application"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/applications/{id}": {
			"get": {
				"tags": [
					"Application"
				],
				"summary": "Get an Application",
				"description": "Returns the application with the specified Id",
				"operationId": "getApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the application to be returned from the system",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The application with the specified Id",
						"schema": {
							"$ref": "#/definitions/Application"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Application"
				],
				"summary": "Update an Application",
				"description": "Updates the application with the specified Id and returns the updated application",
				"operationId": "updateApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the application to be updated within the system",
						"type": "string",
						"required": true
					},
					{
						"in": "body",
						"name": "body",
						"description": "Application to be updated in the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Application"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The application that has been updated",
						"schema": {
							"$ref": "#/definitions/Application"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/applications/{id}/archived": {
			"post": {
				"tags": [
					"Application"
				],
				"summary": "Archive an Application",
				"description": "Archives the application with the specified id",
				"operationId": "archiveApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the application to be archived within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified application has been archived."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/applications/{id}/P12": {
			"post": {
				"tags": [
					"Application"
				],
				"summary": "Create PKCS#12 file for an Application",
				"description": "Requests the creation of a PKCS#12 file for the application with the specified id",
				"operationId": "createPKCS12ForApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the application for which the PKCS#12 is to be created.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "The PKCS#12 file for this application.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PKCS12Data"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The PKCS#12 file for this application.",
						"schema": {
							"$ref": "#/definitions/PKCS12Data"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/applications/{id}/blocked": {
			"post": {
				"tags": [
					"Application"
				],
				"summary": "Block an Application",
				"description": "Blocks the application with the specified id",
				"operationId": "blockApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the application to be blocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified application has been blocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Application"
				],
				"summary": "Unblock an Application",
				"description": "Unblocks the application with the specified id",
				"operationId": "unblockApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the application to be unblocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified application has been unblocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/applications/{id}/policies": {
			"get": {
				"tags": [
					"Application"
				],
				"summary": "List associated Policies",
				"description": "Returns policies for the application with the specified id",
				"operationId": "getPoliciesForApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "Retrieve policies for this application",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "policyId",
						"description": "Retrieve policies using policyId as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter policies by status. Allowed values are 'ACTIVE', 'BLOCKED' and 'ARCHIVED'. By default policies with any status are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "type",
						"description": "Filter policies by type. Allowed values are 'IE' (IdentityX Enrollment), 'IA' (IdentityX Authentication), 'FR' (FIDO Registration) and 'FA' (FIDO Authentication). By default applications with any type are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of policies to be returned in the page.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned policies are to be sorted.  Allowed values are 'policyId', and 'created'.  Default value is 'policyId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the applications to be returned.  Default value is 'true'",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The policies associated with the specified application",
						"schema": {
							"$ref": "#/definitions/PageOfPolicies"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/applications/{id}/sponsorships": {
			"get": {
				"tags": [
					"Application"
				],
				"summary": "List associated Sponsorships",
				"description": "Returns sponsorships for the application with the specified id",
				"operationId": "getSponsorshipsForApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "Retrieve sponsorships for this application",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "registrationId",
						"description": "Retrieve sponsorships using registrationId as a further filter. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter sponsorships by status. Allowed values are 'COMPLETED', 'PENDING' and 'EXPIRED'. By default sponsorships with any status are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of sponsorships to be returned in the page.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned sponsorships are to be sorted.  Allowed values are 'expiration' and 'created'.  Default value is 'expiration'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the applications to be returned.  Default value is 'false'",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The sponsorships associated with the specified application",
						"schema": {
							"$ref": "#/definitions/PageOfSponsorships"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/applications/{id}/registrations": {
			"get": {
				"tags": [
					"Application"
				],
				"summary": "List associated Registrations",
				"description": "Returns registrations for the application with the specified id",
				"operationId": "getRegistrationsForApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "Retrieve registrations for this application",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "registrationId",
						"description": "Retrieve registrations using registrationId as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter registrations by status. Allowed values are 'ACTIVE', 'BLOCKED' and 'ARCHIVED'. By default registrations with any status are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of registrations to be returned in the page.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned registrations are to be sorted.  The only allowed value is 'registrationId'.  Default value is 'registrationId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the applications to be returned.  Default value is true",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The registrations associated with the specified application",
						"schema": {
							"$ref": "#/definitions/PageOfRegistrations"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/applications/{id}/users": {
			"get": {
				"tags": [
					"Application"
				],
				"summary": "List associated Users",
				"description": "Returns users for the application with the specified id",
				"operationId": "getUsersForApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "Retrieve users for this application",
						"required": true,
						"type": "string"
					},
					{
						"in": "query",
						"name": "userId",
						"description": "Retrieve users using userId as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Retrieve users with a specific status.  Valid values are ACTIVE, ARCHIVED, ALL.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of users to be returned in the page.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned users are to be sorted.  The allowed values are 'userId' and 'created'.  Default value is 'userId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the users to be returned.  Default value is true",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The users associated with the specified application",
						"schema": {
							"$ref": "#/definitions/PageOfUsers"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/applications/{id}/authenticationRequests": {
			"get": {
				"tags": [
					"Application"
				],
				"summary": "List associated Authentication Requests",
				"description": "Returns authentication requests for the application with the specified id",
				"operationId": "getAuthenticationRequestsForApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "Retrieve authentication requests for this application",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of authentication requests to be returned in the page.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned authentication requests are to be sorted.  The allowed values are 'authenticationRequestId' and 'created'.  Default value is 'authenticationRequestId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the applications to be returned.  Default value is false",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The authentication requests associated with the specified application",
						"schema": {
							"$ref": "#/definitions/PageOfAuthenticationRequests"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/audits": {
			"get": {
				"tags": [
					"Audit"
				],
				"summary": "List Audit Records",
				"description": "Returns audit records from the system",
				"operationId": "getAudits",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "correlationId",
						"description": "Retrieve audits using correlationId as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of audits to be returned in the page.  Default is 20.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.  Default is 1.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned applications are to be sorted.  Allowed value is 'created'.  Default value is 'created'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the applications to be returned.  Default value is 'false'",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The collection of the audits (or part thereof) which satisfied the search criteria",
						"schema": {
							"$ref": "#/definitions/PageOfAudits"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/audits/{id}": {
			"get": {
				"tags": [
					"Audit"
				],
				"summary": "Get an Audit record",
				"description": "Returns the audit record with the specified Id",
				"operationId": "getAudit",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the Audit record to be returned from the system",
						"type": "string",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "The audit record",
						"schema": {
							"$ref": "#/definitions/Audit"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/authenticationRequests": {
			"get": {
				"tags": [
					"AuthenticationRequest"
				],
				"summary": "List Authentication Requests",
				"description": "Returns authentication requests from the system",
				"operationId": "getAuthenticationRequests",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "userId",
						"description": "Retrieve authentication requests using userId as a search field.  This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of authentication requests to be returned in the page.  Default is 20.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.  Default is 1.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned authentication requests are to be sorted.  Allowed values are 'authenticationRequestId' and 'createdDate'.  Default value is 'created'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the authentication requests to be returned.  Default value is 'false'",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The collection of the authentication requests (or part thereof) which satisfied the search criteria",
						"schema": {
							"$ref": "#/definitions/PageOfAuthenticationRequests"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"AuthenticationRequest"
				],
				"summary": "Create an Authentication Request",
				"description": "Creates a new authentication request in the system. <br /><strong>Note: </strong>Mandatory fields on creation are <code>description</code> and <code>type</code>.",
				"operationId": "addAuthenticationRequest",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Authentication Request to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationRequest"
						}
					}
				],
				"responses": {
					"201": {
						"description": "New authentication request successfully created",
						"schema": {
							"$ref": "#/definitions/AuthenticationRequest"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/authenticationRequests/{id}": {
			"post": {
				"tags": [
					"AuthenticationRequest"
				],
				"summary": "Update an Authentication Request",
				"description": "Updates the authentication request with the specified Id and returns the updated authentication request",
				"operationId": "updateAuthenticationRequest",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the authentication request to be updated within the system",
						"type": "string",
						"required": true
					},
					{
						"in": "body",
						"name": "body",
						"description": "Authentication Request to be updated in the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The authentication request that has been updated",
						"schema": {
							"$ref": "#/definitions/AuthenticationRequest"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"get": {
				"tags": [
					"AuthenticationRequest"
				],
				"summary": "Get an Authentication Request",
				"description": "Returns the authentication request with the specified Id",
				"operationId": "getAuthenticationRequest",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the authentication request to be returned from the system",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "sensitiveData",
						"description": "This field controls whether sensitive data (such as biometrics) are returned with the authentication request. Default value is false",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The authentication request with the specified id",
						"schema": {
							"$ref": "#/definitions/AuthenticationRequest"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/authenticationRequests/{id}/sensitiveData/{dataItemId}": {
			"get": {
				"tags": [
					"AuthenticationRequest"
				],
				"summary": "Get sensitive data",
				"description": "",
				"operationId": "getSensitiveData",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the authentication request to retrieve the sensitive data for",
						"required": true,
						"type": "string"
					},
					{
						"in": "path",
						"name": "dataItemId",
						"description": "The id of the sensitive data item to retrieve",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified sensitive data item associated with this user"
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/authenticationRequests/{id}/archived": {
			"post": {
				"tags": [
					"AuthenticationRequest"
				],
				"summary": "Archive an Authentication Request",
				"description": "Archives the authentication request with the specified id",
				"operationId": "archiveAuthenticationRequest",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the authentication request to be archived within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified authentication request has been archived."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/authenticators": {
			"get": {
				"tags": [
					"Authenticator"
				],
				"summary": "List Authenticators",
				"description": "Returns authenticators from the system",
				"operationId": "getAuthenticators",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "authenticatorId",
						"description": "Retrieve authenticators using authenticatorId as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter authenticators by status. Allowed values are 'ACTIVE', 'BLOCKED' and 'ARCHIVED'. By default authenticators with any status are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned. Default is 1.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of authenticators to be returned in the page. Default is 20.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned authenticators are to be sorted. Allowed values are 'authenticatorId', 'make' and 'model'. Default value is 'authenticatorId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the authenticators to be returned. Default value is true.",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The collection of the authenticators (or part thereof) which satisfied the search criteria",
						"schema": {
							"$ref": "#/definitions/PageOfAuthenticators"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/authenticators/{id}": {
			"get": {
				"tags": [
					"Authenticator"
				],
				"summary": "Get an Authenticator",
				"description": "Returns the authenticator with the specified id",
				"operationId": "getAuthenticator",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the authenticator to be returned from the system",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "sensitiveData",
						"description": "This field controls whether sensitive data (such as biometrics) are returned with the authenticator. Default value is false",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The authenticator with the specified Id",
						"schema": {
							"$ref": "#/definitions/Authenticator"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Authenticator"
				],
				"summary": "Update an Authenticator",
				"description": "Updates the authenticator with the specified Id and returns the updated authenticator",
				"operationId": "updateAuthenticator",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the authenticator to be updated within the system",
						"type": "string",
						"required": true
					},
					{
						"in": "body",
						"name": "body",
						"description": "Authenticator to be updated in the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Authenticator"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The authenticator that has been updated",
						"schema": {
							"$ref": "#/definitions/Authenticator"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/authenticators/{id}/archived": {
			"post": {
				"tags": [
					"Authenticator"
				],
				"summary": "Archive an Authenticator",
				"description": "Archives the authenticator with the specified id",
				"operationId": "archiveAuthenticator",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the authenticator to be archived within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified authenticator has been archived."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/authenticators/{id}/blocked": {
			"post": {
				"tags": [
					"Authenticator"
				],
				"summary": "Block an Authenticator",
				"description": "Blocks the authenticator with the specified id",
				"operationId": "blockAuthenticator",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the authenticator to be blocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified authenticator has been blocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Authenticator"
				],
				"summary": "Unblock an Authenticator",
				"description": "Unblocks the authenticator with the specified id",
				"operationId": "unblockAuthenticator",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the authenticator to be unblocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified authenticator has been unblocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/authenticatorTypes": {
			"get": {
				"tags": [
					"AuthenticatorType"
				],
				"summary": "List Authenticator Types",
				"description": "Returns authenticator types from the system",
				"operationId": "getAuthenticatorTypes",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "vendorName",
						"description": "Retrieve authenticator types using vendorName as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter authenticator types by status. Allowed values are 'ACTIVE', 'BLOCKED' and 'ARCHIVED'. By default authenticator types with any status are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned. Default is 1.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of authenticator types to be returned in the page. Default is 20.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned authenticator types are to be sorted. Allowed values are 'name', 'vendorName', 'created' and 'aaid'. Default value is 'vendorName'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the authenticator types to be returned. Default value is true.",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The collection of the authenticator types (or part thereof) which satisfied the search criteria",
						"schema": {
							"$ref": "#/definitions/PageOfAuthenticatorTypes"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"AuthenticatorType"
				],
				"summary": "Create an Authenticator Type",
				"description": "Creates a new authenticator type in the system. <br /><strong>Note: </strong>Mandatory fields on creation are <code>description</code>, <code>aaid</code>, <code>authenticatorVersion</code>, <code>assertionScheme</code>, <code>authenticationAlgorithm</code>, <code>publicKeyAlgAndEncoding</code>, <code>userVerificationDetails</code>, <code>keyProtection</code>, <code>matcherProtection</code>, <code>attachmentHint</code>, <code>isSecondFactorOnly</code>, <code>tcDisplay</code> and attestationRootCertificates</code>.",
				"operationId": "addAuthenticatorType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "AuthenticatorType to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticatorType"
						}
					}
				],
				"responses": {
					"201": {
						"description": "New authenticator type successfully created",
						"schema": {
							"$ref": "#/definitions/AuthenticatorType"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/authenticatorTypes/{id}": {
			"get": {
				"tags": [
					"AuthenticatorType"
				],
				"summary": "Get an Authenticator Type",
				"description": "Returns the authenticator type with the specified Id",
				"operationId": "getAuthenticatorType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the authenticator type to be returned from the system",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The authenticator type with the specified Id",
						"schema": {
							"$ref": "#/definitions/AuthenticatorType"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"AuthenticatorType"
				],
				"summary": "Update an Authenticator Type",
				"description": "Updates the authenticator type with the specified Id and returns the updated authenticator type",
				"operationId": "updateAuthenticatorType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the authenticator type to be updated within the system",
						"type": "string",
						"required": true
					},
					{
						"in": "body",
						"name": "body",
						"description": "AuthenticatorType to be updated in the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticatorType"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The authenticator type that has been updated",
						"schema": {
							"$ref": "#/definitions/AuthenticatorType"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/authenticatorTypes/{id}/blocked": {
			"post": {
				"tags": [
					"AuthenticatorType"
				],
				"summary": "Block an Authenticator Type",
				"description": "Blocks the authenticator type with the specified id",
				"operationId": "blockAuthenticatorType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the authenticator type to be blocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified authenticator type has been blocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"AuthenticatorType"
				],
				"summary": "Unblock an Authenticator Type",
				"description": "Unblocks the authenticator type with the specified id",
				"operationId": "unblockRegistration",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the authenticator type to be unblocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified authenticator type has been unblocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/authenticatorTypes/{id}/archived": {
			"post": {
				"tags": [
					"AuthenticatorType"
				],
				"summary": "Archive an Authenticator Type",
				"description": "Archives the authenticator type with the specified id",
				"operationId": "archiveAuthenticatorType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the authenticator type to be archived within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified authenticator type has been archived."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/policies": {
			"get": {
				"tags": [
					"Policy"
				],
				"summary": "List Policies",
				"description": "Returns policies from the system",
				"operationId": "getPolicies",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "policyId",
						"description": "Retrieve policies using policyId as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter policies by status. Allowed values are 'ACTIVE', 'BLOCKED' and 'ARCHIVED'. By default policies with any status are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned. Default is 1.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of policies to be returned in the page. Default is 20.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned policies are to be sorted. Allowed values are 'policyId' and 'created'. Default value is 'policyId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the policies to be returned. Default value is true.",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The collection of the policies (or part thereof) which satisfied the search criteria",
						"schema": {
							"$ref": "#/definitions/PageOfPolicies"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Policy"
				],
				"summary": "Create a Policy",
				"description": "Creates a new policy in the system. <br /><strong>Note: </strong>Mandatory fields on creation are <code>policyId</code> and <code>type</code>.",
				"operationId": "addPolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Policy to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Policy"
						}
					}
				],
				"responses": {
					"201": {
						"description": "New policy successfully created",
						"schema": {
							"$ref": "#/definitions/Policy"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/policies/{id}": {
			"get": {
				"tags": [
					"Policy"
				],
				"summary": "Get a Policy",
				"description": "Returns the policy with the specified Id",
				"operationId": "getPolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the policy to be returned from the system",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The policy with the specified id",
						"schema": {
							"$ref": "#/definitions/Policy"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Policy"
				],
				"summary": "Update a Policy",
				"description": "Updates the policy with the specified Id and returns the updated policy",
				"operationId": "updatePolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the policy to be updated within the system",
						"type": "string",
						"required": true
					},
					{
						"in": "body",
						"name": "body",
						"description": "Policy to be updated in the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Policy"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The policy that has been updated",
						"schema": {
							"$ref": "#/definitions/Policy"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/policies/{id}/archived": {
			"post": {
				"tags": [
					"Policy"
				],
				"summary": "Archive a Policy",
				"description": "Archives the policy with the specified id",
				"operationId": "archivePolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the policy to be archived within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified policy has been archived."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/policies/{id}/blocked": {
			"post": {
				"tags": [
					"Policy"
				],
				"summary": "Block a Policy",
				"description": "Blocks the policy with the specified id",
				"operationId": "blockPolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the policy to be blocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified policy has been blocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Policy"
				],
				"summary": "Unblock a Policy",
				"description": "Unblocks the policy with the specified id",
				"operationId": "unblockPolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the policy to be unblocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified policy has been unblocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/policies/{id}/authenticationRequests": {
			"get": {
				"tags": [
					"Policy"
				],
				"summary": "List associated Authentication Requests",
				"description": "Returns a page of authentication requests for the policy with the specified Id",
				"operationId": "getAuthenticationRequestsForApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "Retrieve authentication requests for this policy",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of authentication requests to be returned in the page.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned authentication requests are to be sorted.  The allowed values are 'authenticationRequestId' and 'created'.  Default value is 'authenticationRequestId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the applications to be returned.  Default value is false",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The authentication requests associated with the specified policy",
						"schema": {
							"$ref": "#/definitions/PageOfAuthenticationRequests"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/registrationChallenges": {
			"post": {
				"tags": [
					"RegistrationChallenge"
				],
				"summary": "Create a Registration Challenge",
				"description": "Creates a new registration challenge in the system",
				"operationId": "addRegistrationChallenge",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Registration challenge to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RegistrationChallenge"
						}
					}
				],
				"responses": {
					"201": {
						"description": "New registration challenge successfully created",
						"schema": {
							"$ref": "#/definitions/RegistrationChallenge"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/registrationChallenges/{id}": {
			"get": {
				"tags": [
					"RegistrationChallenge"
				],
				"summary": "Get a Registration Challenge",
				"description": "Returns the registration challenge with the specified Id",
				"operationId": "getRegistrationChallenge",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the registration challenge to be returned from the system",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The registration challenge with the specified Id",
						"schema": {
							"$ref": "#/definitions/RegistrationChallenge"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"RegistrationChallenge"
				],
				"summary": "Update a Registration Challenge",
				"description": "Updates the registration with the specified Id and returns the updated registration challenge",
				"operationId": "updateRegistrationChallenge",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the registration challenge to be updated within the system",
						"type": "string",
						"required": true
					},
					{
						"in": "body",
						"name": "body",
						"description": "Registration Challenge to be updated in the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RegistrationChallenge"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The registration challenge that has been updated",
						"schema": {
							"$ref": "#/definitions/RegistrationChallenge"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/registrationChallenges/{id}/archived": {
			"post": {
				"tags": [
					"RegistrationChallenge"
				],
				"summary": "Archive a Registration Challenge",
				"description": "Archives the registration challenge with the specified id",
				"operationId": "archiveRegistrationChallenge",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the registration challenge to be archived within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified registration challenge has been archived."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/registrations": {
			"get": {
				"tags": [
					"Registration"
				],
				"summary": "List Registrations",
				"description": "Returns registrations from the system",
				"operationId": "getRegistrations",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "registrationId",
						"description": "Retrieve registrations using registrationId as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter registrations by status. Allowed values are 'ACTIVE', 'BLOCKED' and 'ARCHIVED'. By default registrations with any status are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned. Default is 1.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of registrations to be returned in the page. Default is 20.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned registrations are to be sorted. Allowed value is 'registrationId'.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the registrations to be returned. Default value is true.",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The collection of the registrations (or part thereof) which satisfied the search criteria",
						"schema": {
							"$ref": "#/definitions/PageOfRegistrations"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Registration"
				],
				"summary": "Create a Registration",
				"description": "Creates a new registration in the system. <br /><strong>Note: </strong>Mandatory field on creation is <code>registrationId</code>.",
				"operationId": "addRegistration",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Registration to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Registration"
						}
					}
				],
				"responses": {
					"201": {
						"description": "New registration successfully created",
						"schema": {
							"$ref": "#/definitions/Registration"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/registrations/{id}": {
			"get": {
				"tags": [
					"Registration"
				],
				"summary": "Get a Registration",
				"description": "Returns the registration with the specified Id",
				"operationId": "getRegistration",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the registration to be returned from the system",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The registration with the specified Id",
						"schema": {
							"$ref": "#/definitions/Registration"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Registration"
				],
				"summary": "Update a Registration",
				"description": "Updates the registration with the specified Id and returns the updated registration",
				"operationId": "updateRegistration",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the registration to be updated within the system",
						"type": "string",
						"required": true
					},
					{
						"in": "body",
						"name": "body",
						"description": "Registration to be updated in the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Registration"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The registration that has been updated",
						"schema": {
							"$ref": "#/definitions/Registration"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/registrations/{id}/archived": {
			"post": {
				"tags": [
					"Registration"
				],
				"summary": "Archive a Registration",
				"description": "Archives the registration with the specified id",
				"operationId": "archiveRegistration",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the registration to be archived within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified registration has been archived."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/registrations/{id}/blocked": {
			"post": {
				"tags": [
					"Registration"
				],
				"summary": "Block a Registration",
				"description": "Blocks the registration with the specified id",
				"operationId": "blockRegistration",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the registration to be blocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified registration has been blocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Registration"
				],
				"summary": "Unblock a Registration",
				"description": "Unblocks the registration with the specified id",
				"operationId": "unblockRegistration",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the registration to be unblocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified registration has been unblocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/registrations/{id}/authenticationRequests": {
			"get": {
				"tags": [
					"Registration"
				],
				"summary": "List associated Authentication Requests",
				"description": "Returns a page of authentication requests for the registration with the specified Id",
				"operationId": "getAuthenticationRequestsForApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "Retrieve authentication requests for this registration",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of authentication requests to be returned in the page.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned authentication requests are to be sorted.  The allowed values are 'authenticationRequestId' and 'created'.  Default value is 'authenticationRequestId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the applications to be returned.  Default value is false",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The authentication requests associated with the specified registration",
						"schema": {
							"$ref": "#/definitions/PageOfAuthenticationRequests"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/roles": {
			"get": {
				"tags": [
					"Role"
				],
				"summary": "List Roles",
				"description": "Returns roles from the system",
				"operationId": "getRoles",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "name",
						"description": "Retrieve roles using name as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter roles by status. Allowed values are 'ACTIVE', 'BLOCKED' and 'ARCHIVED'. By default roles with any status are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned. Default is 1.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of roles to be returned in the page. Default is 20.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned roles are to be sorted. Allowed value is 'name'.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the roles to be returned. Default value is true.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "The collection of the roles (or part thereof) which satisfied the search criteria",
						"schema": {
							"$ref": "#/definitions/PageOfRoles"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Role"
				],
				"summary": "Create a Role",
				"description": "Creates a new role in the system. <br /><strong>Note: </strong>Mandatory fields on creation are <code>name</code> and <code>description</code>.",
				"operationId": "addRole",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Role to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Role"
						}
					}
				],
				"responses": {
					"201": {
						"description": "New role successfully created",
						"schema": {
							"$ref": "#/definitions/Role"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/roles/{id}": {
			"get": {
				"tags": [
					"Role"
				],
				"summary": "Get a Role",
				"description": "Returns the role with the specified Id",
				"operationId": "getRole",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the role to be returned from the system",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "includeDeleted",
						"description": "A deleted tenant is only returned if this flag is set to true.  Default is 'true'.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "The role with the specified Id",
						"schema": {
							"$ref": "#/definitions/Role"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Role"
				],
				"summary": "Update a Role",
				"description": "Updates the role with the specified Id and returns the updated role",
				"operationId": "updateRole",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the role to be updated within the system",
						"type": "string",
						"required": true
					},
					{
						"in": "body",
						"name": "body",
						"description": "Role to be updated in the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Role"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The role that has been updated",
						"schema": {
							"$ref": "#/definitions/Role"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/roles/{id}/archived": {
			"post": {
				"tags": [
					"Role"
				],
				"summary": "Archive a Role",
				"description": "Archives the role with the specified id",
				"operationId": "archiveRole",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the role to be archived within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified role has been archived."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/sponsorships": {
			"get": {
				"tags": [
					"Sponsorship"
				],
				"summary": "List Sponsorships",
				"description": "Returns sponsorships from the system",
				"operationId": "getSponsorships",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "sponsorshipToken",
						"description": "Retrieve sponsorships using sponsorshipToken as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter sponsorships by status. Allowed values are 'COMPLETED', 'EXPIRED' and 'PENDING'. By default sponsorships with any status are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned. Default is 1.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of sponsorships to be returned in the page. Default is 20.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned sponsorships are to be sorted. Allowed values are 'created' and 'expiration'. Default value is 'expiration'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the sponsorships to be returned. Default value is false.",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The collection of the sponsorships (or part thereof) which satisfied the search criteria",
						"schema": {
							"$ref": "#/definitions/PageOfSponsorships"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Sponsorship"
				],
				"summary": "Create a Sponsorship",
				"description": "Creates a new sponsorship in the system. <br /><strong>Note: </strong>Mandatory field on creation is <code>type</code>.",
				"operationId": "addSponsorship",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Sponsorship to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Sponsorship"
						}
					}
				],
				"responses": {
					"201": {
						"description": "New sponsorship successfully created",
						"schema": {
							"$ref": "#/definitions/Sponsorship"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/sponsorships/{id}": {
			"get": {
				"tags": [
					"Sponsorship"
				],
				"summary": "Get a Sponsorship",
				"description": "Returns the sponsorship with the specified Id",
				"operationId": "getSponsorship",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the sponsorship to be returned from the system",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The sponsorship with the specified Id",
						"schema": {
							"$ref": "#/definitions/Sponsorship"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Sponsorship"
				],
				"summary": "Update a Sponsorship",
				"description": "Updates the sponsorship with the specified Id and returns the updated sponsorship",
				"operationId": "updateSponsorship",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the sponsorship to be updated within the system",
						"type": "string",
						"required": true
					},
					{
						"in": "body",
						"name": "body",
						"description": "Sponsorship to be updated in the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Sponsorship"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The sponsorship that has been updated",
						"schema": {
							"$ref": "#/definitions/Sponsorship"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/sponsorships/{id}/archived": {
			"post": {
				"tags": [
					"Sponsorship"
				],
				"summary": "Archive a Sponsorship",
				"description": "Archives the sponsorship with the specified id",
				"operationId": "archiveSponsorship",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the sponsorship to be archived within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified sponsorship has been archived."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/systemAuthenticatorTypes": {
			"get": {
				"tags": [
					"SystemAuthenticatorType"
				],
				"summary": "List System Authenticator Types",
				"description": "Returns system authenticator types from the system",
				"operationId": "getSystemAuthenticatorTypes",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "vendorName",
						"description": "Retrieve system authenticator types using vendorName as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter system authenticator types by status. Allowed values are 'ACTIVE', 'BLOCKED' and 'ARCHIVED'. By default system authenticator types with any status are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned. Default is 1.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of system authenticator types to be returned in the page. Default is 20.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned system authenticator types are to be sorted. Allowed values are 'name', 'vendorName' and 'aaid'. Default value is 'vendorName'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the system authenticator types to be returned. Default value is true.",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The collection of the system authenticator types (or part thereof) which satisfied the search criteria",
						"schema": {
							"$ref": "#/definitions/PageOfSystemAuthenticatorTypes"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"SystemAuthenticatorType"
				],
				"summary": "Create a System Authenticator Type",
				"description": "Creates a new system authenticator type in the system.<br /><strong>Note: </strong>Mandatory fields on creation are <code>description</code>, <code>aaid</code>, <code>authenticatorVersion</code>, <code>assertionScheme</code>, <code>authenticationAlgorithm</code>, <code>publicKeyAlgAndEncoding</code>, <code>userVerificationDetails</code>, <code>keyProtection</code>, <code>matcherProtection</code>, <code>attachmentHint</code>, <code>isSecondFactorOnly</code>, <code>tcDisplay</code> and <code>attestationRootCertificates</code>.",
				"operationId": "addSystemAuthenticatorType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "SystemAuthenticatorType to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SystemAuthenticatorType"
						}
					}
				],
				"responses": {
					"201": {
						"description": "New system authenticator type successfully created",
						"schema": {
							"$ref": "#/definitions/SystemAuthenticatorType"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/systemAuthenticatorTypes/{id}": {
			"get": {
				"tags": [
					"SystemAuthenticatorType"
				],
				"summary": "Get a System Authenticator Type",
				"description": "Returns the system authenticator type with the specified Id",
				"operationId": "getSystemAuthenticatorType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the system authenticator type to be returned from the system",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The system authenticator type with the specified Id",
						"schema": {
							"$ref": "#/definitions/SystemAuthenticatorType"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"SystemAuthenticatorType"
				],
				"summary": "Update a System Authenticator Type",
				"description": "Updates the system authenticator type with the specified Id and returns the updated system authenticator type",
				"operationId": "updateSystemAuthenticatorType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the system authenticator type to be updated within the system",
						"type": "string",
						"required": true
					},
					{
						"in": "body",
						"name": "body",
						"description": "SystemAuthenticatorType to be updated in the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SystemAuthenticatorType"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The system authenticator type that has been updated",
						"schema": {
							"$ref": "#/definitions/SystemAuthenticatorType"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/systemAuthenticatorTypes/{id}/archived": {
			"post": {
				"tags": [
					"SystemAuthenticatorType"
				],
				"summary": "Archive a System Authenticator Type",
				"description": "Archives the system authenticator type with the specified id",
				"operationId": "archiveSystemAuthenticatorType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the system authenticator type to be archived within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified system authenticator type has been archived."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/tenants": {
			"get": {
				"tags": [
					"Tenant"
				],
				"summary": "List Tenants",
				"description": "Returns tenants from the system",
				"operationId": "getTenants",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "name",
						"description": "Retrieve tenants using name as a search field.  This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "domainId",
						"description": "Retrieve tenants using domainId as a search field.  This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter tenants by status. Allowed values are 'ACTIVE', 'BLOCKED' and 'ARCHIVED'. By default tenants with any status are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of tenants to be returned in the page.  Default value is 20.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.  Default value is 1.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned tenants are to be sorted.  Allowed values are 'name', 'status', 'domainId' and 'created'.  Default value is 'name'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the tenants to be returned.  Default value is true",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "The collection of the tenants (or part thereof) which satisfied the search criteria",
						"schema": {
							"$ref": "#/definitions/PageOfTenants"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Tenant"
				],
				"summary": "Create a Tenant",
				"description": "Creates a new tenant in the system. <br /><strong>Note: </strong>Mandatory fields on creation are <code>name</code> and <code>domainId</code>.",
				"operationId": "addTenant",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Tenant to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Tenant"
						}
					}
				],
				"responses": {
					"201": {
						"description": "New tenant successfully created",
						"schema": {
							"$ref": "#/definitions/Tenant"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/tenants/{id}": {
			"post": {
				"tags": [
					"Tenant"
				],
				"summary": "Update a Tenant",
				"description": "Updates the tenant with the specified Id and returns the updated tenant",
				"operationId": "updateTenant",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the tenant to be updated within the system",
						"type": "string",
						"required": true
					},
					{
						"in": "body",
						"name": "body",
						"description": "Tenant to be updated in the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Tenant"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The tenant that has been updated",
						"schema": {
							"$ref": "#/definitions/Tenant"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"get": {
				"tags": [
					"Tenant"
				],
				"summary": "Get a Tenant",
				"description": "Returns the tenant with the specified Id",
				"operationId": "getTenant",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the tenant to be returned from the system",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "includeDeleted",
						"description": "A deleted tenant is only returned if this flag is set to true.  Default is 'true'.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "The tenant with the specified id",
						"schema": {
							"$ref": "#/definitions/Tenant"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/tenants/{id}/archived": {
			"post": {
				"tags": [
					"Tenant"
				],
				"summary": "Archive a Tenant",
				"description": "Archives the tenant with the specified id",
				"operationId": "archiveTenant",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the tenant to be archived within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified tenant has been archived."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/tenants/{id}/blocked": {
			"post": {
				"tags": [
					"Tenant"
				],
				"summary": "Block a Tenant",
				"description": "Blocks the tenant with the specified id",
				"operationId": "blockTenant",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the tenant to be blocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified tenant has been blocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Tenant"
				],
				"summary": "Unblock a Tenant",
				"description": "Unblocks the tenant with the specified id",
				"operationId": "unblockTenant",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the tenant to be unblocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified tenant has been unblocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/tokens": {
			"get": {
				"tags": [
					"Token"
				],
				"summary": "List Tokens",
				"description": "Returns tokens from the system",
				"operationId": "getTokens",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "subjectId",
						"description": "Retrieve tokens using subjectId as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter tokens by status. Allowed values are 'ACTIVE', 'ARCHIVED' and 'EXPIRED'. By default tokens with any status are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "type",
						"description": "Filter tokens by type. Allowed values are 'SESSION' and 'PERMANENT'. By default tokens with of any type are returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned. Default is 1.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of tokens to be returned in the page. Default is 20.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned tokens are to be sorted. Allowed values are 'created' and 'expiration'. Default value is 'created'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the tokens to be returned. Default value is false.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "The collection of the tokens (or part thereof) which satisfied the search criteria",
						"schema": {
							"$ref": "#/definitions/PageOfTokens"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Token"
				],
				"summary": "Create a Token",
				"description": "Creates a new token in the system. <br /><strong>Note: </strong>Mandatory field on creation is <code>publicKey</code>.",
				"operationId": "addToken",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "Token",
						"description": "Token to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Token"
						}
					}
				],
				"responses": {
					"201": {
						"description": "New token successfully created",
						"schema": {
							"$ref": "#/definitions/Token"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/tokens/{id}": {
			"get": {
				"tags": [
					"Token"
				],
				"summary": "Get a Token",
				"description": "Returns the token with the specified Id",
				"operationId": "getToken",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the token to be returned from the system",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "includeDeleted",
						"description": "A deleted token is only returned if this flag is set to true.  Default is 'true'.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "The token with the specified Id",
						"schema": {
							"$ref": "#/definitions/Token"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/tokens/{id}/archived": {
			"post": {
				"tags": [
					"Token"
				],
				"summary": "Archive a Token",
				"description": "Archives the token with the specified id",
				"operationId": "archiveToken",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the token to be archived within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified token has been archived."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/users": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "List Users",
				"description": "Returns users from the system",
				"operationId": "getUsers",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "userId",
						"description": "Retrieve users using userId as a search field.  This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "status",
						"description": "Filter users by status. Allowed values are 'ACTIVE', 'BLOCKED', 'SUSPENDED' and 'ARCHIVED'. By default users with any status are returned.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of users to be returned in the page.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned users are to be sorted.  Allowed values are 'userId' and 'created'.  Default value is 'userId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the users to be returned.  Default value is true",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The collection of the users (or part thereof) which satisfied the search criteria",
						"schema": {
							"$ref": "#/definitions/PageOfUsers"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"User"
				],
				"summary": "Create a User",
				"description": "Creates a new user in the system. <br /><strong>Note: </strong>Mandatory field on creation is <code>userId</code>.",
				"operationId": "addUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "User to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"201": {
						"description": "New user successfully created",
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/users/{id}": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Updates a User",
				"description": "Updates the user with the specified Id and returns the updated user",
				"operationId": "updateUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the user to be updated within the system",
						"type": "string",
						"required": true
					},
					{
						"in": "body",
						"name": "body",
						"description": "User to be updated in the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The user that has been updated",
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"get": {
				"tags": [
					"User"
				],
				"summary": "Get a User",
				"description": "Returns the user with the specified Id",
				"operationId": "getUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The identifier of the user to be returned from the system",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "sensitiveData",
						"description": "This field controls whether sensitive data (such as biometrics) are returned with the user. Default value is false",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The user with the specified Id",
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/users/{id}/sensitiveData/{dataItemId}": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Get sensitive data",
				"description": "",
				"operationId": "getSensitiveData",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the user to retrieve the sensitive data for",
						"required": true,
						"type": "string"
					},
					{
						"in": "path",
						"name": "dataItemId",
						"description": "The id of the sensitive data item to retrieve",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified sensitive data item associated with this user"
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/users/{id}/archived": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Archive a User",
				"description": "Archives the user with the specified id",
				"operationId": "archiveUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the user to be archived within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified user has been archived."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/users/{id}/blocked": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Block a User",
				"description": "Blocks the user with the specified id",
				"operationId": "blockUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the user to be blocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified user has been blocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"User"
				],
				"summary": "Unblock a User",
				"description": "Unblocks the user with the specified id",
				"operationId": "unblockUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "The id of the user to be unblocked within the system",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The specified user has been unblocked."
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/users/{id}/authenticators": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "List associated Authenticators",
				"description": "Returns a authenticators for the user with the specified id",
				"operationId": "getAuthenticatorsForUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "Retrieve authenticators for this user",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "authenticatorId",
						"description": "Retrieve authenticators using authenticatorId as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of authenticators to be returned in the page.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned authenticators are to be sorted.  Allowed values are 'authenticatorId', 'make' and 'model'.  Default value is 'authenticatorId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the users to be returned.  Default value is true",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The authenticators associated with the specified user",
						"schema": {
							"$ref": "#/definitions/PageOfAuthenticators"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/users/{id}/sponsorships": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "List associated Sponsorships",
				"description": "Returns a page of sponsorships for the user with the specified Id",
				"operationId": "getSponsorshipsForUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "Retrieve sponsorships for this user",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sponsorshipId",
						"description": "Retrieve sponsorships using sponsorshipId as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of sponsorships to be returned in the page.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned sponsorships are to be sorted. Allowed values are 'created' and 'expiration'. Default value is 'expiration'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the users to be returned.  Default value is false",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The sponsorships associated with the specified user",
						"schema": {
							"$ref": "#/definitions/PageOfSponsorships"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/users/{id}/registrations": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "List associated Registrations",
				"description": "Returns a page of registrations for the user with the specified Id",
				"operationId": "getRegistrationsForUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "Retrieve registrations for this user",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "registrationId",
						"description": "Retrieve registrations using registrationId as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of registrations to be returned in the page.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned registrations are to be sorted.  The only allowed value is 'registrationId'.  Default value is 'registrationId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the users to be returned.  Default value is true",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The registrations associated with the specified user",
						"schema": {
							"$ref": "#/definitions/PageOfRegistrations"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/users/{id}/applications": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "List associated Applications",
				"description": "Returns a page of applications for the user with the specified Id",
				"operationId": "getApplicationsForUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "Retrieve applications for this user",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "applicationId",
						"description": "Retrieve applications using applicationId as a search field. This field may contain '*' as a wild card and is case insensitive.",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of applications to be returned in the page.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned applications are to be sorted.  Allowed values are 'applicationId' and 'created'.  Default value is 'applicationId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the users to be returned.  Default value is true",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The applications associated with the specified user",
						"schema": {
							"$ref": "#/definitions/PageOfApplications"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/users/{id}/authenticationRequests": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "List associated Authentication Requests",
				"description": "Returns a page of authentication requests for the user with the specified Id",
				"operationId": "getAuthenticationRequestsForUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "Retrieve authentication requests for this user",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The maximum number of authentication requests to be returned in the page.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "page",
						"description": "Lists are returned in pages.  This parameter specifies the page to be returned.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "query",
						"name": "sortField",
						"description": "Field on which the returned authentication requests are to be sorted.  The allowed values are 'authenticationRequestId' and 'created'.  Default value is 'authenticationRequestId'",
						"required": false,
						"type": "string"
					},
					{
						"in": "query",
						"name": "sortAscending",
						"description": "Sort order of the users to be returned.  Default value is true",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "query",
						"name": "expand",
						"description": "Controls whether any linked resources are retrieved in full by the server on this request (see Expanding Resources). Default value is 'false'",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The authentication requests associated with the specified user",
						"schema": {
							"$ref": "#/definitions/PageOfAuthenticationRequests"
						}
					},
					"400": {
						"description": "The request was invalid, often missing a required parameter. More details in the response body",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"401": {
						"description": "Authentication credentials were missing or incorrect",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"403": {
						"description": "The caller doesn’t have sufficient permission",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"404": {
						"description": "The requested item doesn’t exist, or the URI requested is invalid",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					},
					"500": {
						"description": "There was an error within the IdentityX Server",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		}
	},
	"definitions": {
		"Application": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the application. This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the application. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"applicationId": {
					"type": "string",
					"required": true,
					"description": "An externally provided unique identifier for the application.  This a case insensitive field and is mandatory when creating an application",
					"maxLength": 50,
					"x-mandatory-on-create": true,
					"x-sortable": "true"
				},
				"applicationIcon": {
					"type": "string",
					"format": "byte",
					"description": "The icon associated with this application - used by IdentityX in the authentication request display."
				},
				"name": {
					"type": "string",
					"required": true,
					"description": "This is the name of the application as shown to the user in the IdentityX app, and is mandatory when creating an application",
					"maxLength": 100,
					"x-mandatory-on-create": true
				},
				"description": {
					"type": "string",
					"required": true,
					"description": "A short description of the application.",
					"maxLength": 255
				},
				"primaryEmail": {
					"type": "string",
					"description": "The email address of the primary contact for this application.",
					"maxLength": 100
				},
				"primaryFirstName": {
					"type": "string",
					"description": "The first name of the primary contact for this application.",
					"maxLength": 50
				},
				"primaryLastName": {
					"type": "string",
					"description": "The last name of the primary contact for this application.",
					"maxLength": 50
				},
				"primaryPhone": {
					"type": "string",
					"description": "The phone number of the primary contact for this application.",
					"maxLength": 50
				},
				"primaryPhoneCountryCode": {
					"type": "string",
					"description": "The country code of the primary contact for this application.",
					"maxLength": 10
				},
				"primaryAlternatePhone": {
					"type": "string",
					"description": "An alternative phone number for the primary contact for this application.",
					"maxLength": 50
				},
				"primaryAlternatePhoneCountryCode": {
					"type": "string",
					"description": "The country code for the alternative phone number for the primary contact for this application.",
					"maxLength": 10
				},
				"primaryFax": {
					"type": "string",
					"description": "The fax number for the primary contact for this application.",
					"maxLength": 50
				},
				"secondaryEmail": {
					"type": "string",
					"description": "The email address of the alternative contact for this application.",
					"maxLength": 100
				},
				"secondaryFirstName": {
					"type": "string",
					"description": "The first name of the alternative contact for this application.",
					"maxLength": 50
				},
				"secondaryLastName": {
					"type": "string",
					"description": "The last name of the alternative contact for this application.",
					"maxLength": 50
				},
				"secondaryPhone": {
					"type": "string",
					"description": "The phone number of the alternative contact for this application.",
					"maxLength": 50
				},
				"secondaryPhoneCountryCode": {
					"type": "string",
					"description": "The country code of the alternative contact for this application.",
					"maxLength": 10
				},
				"secondaryAlternatePhone": {
					"type": "string",
					"description": "An alternative phone number for the alternative contact for this application.",
					"maxLength": 50
				},
				"secondaryAlternatePhoneCountryCode": {
					"type": "string",
					"description": "The country code for the alternative phone number for the alternative contact for this application.",
					"maxLength": 10
				},
				"secondaryFax": {
					"type": "string",
					"description": "The fax number for the alternative contact for this application.",
					"maxLength": 50
				},
				"addressLine1": {
					"type": "string",
					"description": "The first line of the business address for the primary contact for this application.",
					"maxLength": 200
				},
				"addressLine2": {
					"type": "string",
					"description": "The second line of the business address for the primary contact for this application.",
					"maxLength": 200
				},
				"city": {
					"type": "string",
					"description": "The city of the business address for the primary contact for this application.",
					"maxLength": 50
				},
				"state": {
					"type": "string",
					"description": "The state of the business address for the primary contact for this application.",
					"maxLength": 50
				},
				"postalCode": {
					"type": "string",
					"description": "The postal code  of the business address for the primary contact for this application.",
					"maxLength": 50
				},
				"country": {
					"type": "string",
					"description": "The country  of the business address for the primary contact for this application.",
					"maxLength": 50
				},
				"certificateCreated": {
					"type": "boolean",
					"description": "Indicates if the IdentityX certificate has been created for this application."
				},
				"publishFacetsURL": {
					"type": "boolean",
					"description": "Indicates if the application's facets are hosted on this server."
				},
				"fidoApplicationId": {
					"type": "string",
					"description": "The FIDO AppID, a https URL specifying the location of the application's facets in JSON format.",
					"maxLength": 255
				},
				"certificate": {
					"type": "string",
					"format": "byte",
					"description": "The certificate issued to this application. This attribute is readonly",
					"x-readonly": "true"
				},
				"archived": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the application was archived within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the application was created within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-sortable": "true",
					"x-readonly": "true"
				},
				"updated": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the application was last updated within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"status": {
					"type": "enum",
					"description": "Specified the state of the application. This attribute is readonly",
					"enum": [
						"ACTIVE",
						"ARCHIVED",
						"BLOCKED"
					],
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"fidoFacets": {
					"$ref": "#/definitions/FIDOFacets",
					"description": "The facets associated with this application. This attribute is readonly"
				},
				"tenant": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The tenant containing this application. This attribute is readonly",
					"x-readonly": "true"
				},
				"users": {
					"$ref": "#/definitions/PageOfResourcesLink",
					"description": "The users associated with this application. This attribute is readonly and can be expanded when getting a single application",
					"x-expandable-in-instance": "true",
					"x-readonly": "true"
				},
				"registrations": {
					"$ref": "#/definitions/PageOfResourcesLink",
					"description": "The registrations associated with this application. This attribute is readonly and can be expanded when getting a single application",
					"x-expandable-in-instance": "true",
					"x-readonly": "true"
				},
				"policies": {
					"$ref": "#/definitions/PageOfResourcesLink",
					"description": "The policies associated with this application. This attribute is readonly and can be expanded when getting a single application",
					"x-expandable-in-instance": "true",
					"x-readonly": "true"
				},
				"authenticationRequests": {
					"$ref": "#/definitions/PageOfResourcesLink",
					"description": "The authentication requests associated with this application. This attribute is readonly and can be expanded when getting a single application",
					"x-expandable-in-instance": "true",
					"x-readonly": "true"
				},
				"sponsorships": {
					"$ref": "#/definitions/PageOfResourcesLink",
					"description": "The sponsorships associated with this application. This attribute is readonly",
					"x-readonly": "true"
				}
			}
		},
		"FIDOFacets": {
			"properties": {
				"trustedFacets": {
					"type": "array",
					"description": "The collection of FIDO facets",
					"items": {
						"$ref": "#/definitions/FIDOTrustedFacets"
					}
				}
			}
		},
		"FIDOTrustedFacets": {
			"properties": {
				"version": {
					"type": "string",
					"description": "The FIDO UAF version this facet applies to"
				},
				"ids": {
					"type": "array",
					"description": "Collection of accepted facet ids for this application",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"PageOfApplications": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of applications"
				},
				"items": {
					"type": "array",
					"description": "The collections of applications",
					"items": {
						"$ref": "#/definitions/Application"
					}
				}
			}
		},
		"Audit": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the audit, This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the audit. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the audit was created within the system. This attribute is readonly",
					"x-sortable": "true",
					"x-readonly": "true"
				},
				"clientId": {
					"type": "integer",
					"format": "int64",
					"description": "The identifier of the client which created the audit."
				},
				"clientVersion": {
					"type": "string",
					"description": "The version of the client which created the audit."
				},
				"request": {
					"type": "string",
					"description": "The URL including the query string used by the client for audited the request."
				},
				"authType": {
					"type": "string",
					"description": "Indicates how the client was authenticated to perform the request. For REST services, this can be 'Session Token' or 'Permanent Token'. For IdentityX, this would be 'Mutual Auth SSL'."
				},
				"authUser": {
					"type": "string",
					"description": "Holds the identifier for the user that was authenticated for this audited request."
				},
				"processingTime": {
					"type": "integer",
					"format": "int64",
					"description": "The number of milliseconds taken for the server to process the request."
				},
				"subjectId": {
					"type": "string",
					"description": "The unique identifier of the object being created, retrieved, updated or archived."
				},
				"correlationId": {
					"type": "string",
					"description": "A unique identifier correlating related audits."
				},
				"result": {
					"type": "string",
					"description": "Indicates the overall outcome of the audited request. This can be one of 'success' or 'fail'."
				},
				"additionalInfo": {
					"type": "string",
					"description": "A string containing any other uncategorised audited information for this request."
				},
				"auditType": {
					"type": "string",
					"description": "The system component that generated the audit, possible values are 'RE' (Rest Services) or 'IX' (SOAP IdentityX). Read-only value."
				},
				"error": {
					"type": "array",
					"description": "If the result property indicates an error, this property may contain zero or more AuditedError objects with additional information about the error.",
					"items": {
						"$ref": "#/definitions/AuditedError"
					}
				},
				"application": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The application associated with this audit. This attribute is readonly",
					"x-readonly": "true"
				},
				"registration": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The registration associated with this audit. This attribute is readonly",
					"x-readonly": "true"
				},
				"token": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The token associated with this audit. This attribute is readonly",
					"x-readonly": "true"
				},
				"tenant": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The tenant containing this audit.",
					"x-readonly": "true"
				}
			}
		},
		"AuditedError": {
			"properties": {
				"code": {
					"type": "string",
					"description": "A server code for the error that occurred."
				},
				"message": {
					"type": "string",
					"description": "A message describing the error that occurred."
				}
			}
		},
		"PageOfAudits": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of audits."
				},
				"items": {
					"type": "array",
					"description": "The collections of audits.",
					"items": {
						"$ref": "#/definitions/Audit"
					}
				}
			}
		},
		"AuthenticationAttempt": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the authentication attempt"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object."
				},
				"attemptId": {
					"type": "string",
					"required": true,
					"description": "An externally provided unique identifier for the authentication attempt.  This a case insensitive field.",
					"maxLength": 100
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the authenticationAttempt was created within the system."
				},
				"decision": {
					"type": "string",
					"description": "A determination as to the result of this attempt."
				},
				"reason": {
					"type": "string",
					"description": "The reason for the determination as to the result of this attempt."
				},
				"score": {
					"type": "number",
					"format": "double",
					"description": "The false match rate (FMR) associated with the overall attempt."
				},
				"state": {
					"type": "enum",
					"description": "Specified the state of the authenticationAttempt.",
					"enum": [
						"COMPLETE",
						"PENDING"
					]
				},
				"items": {
					"type": "array",
					"description": "The items associated with this attempt",
					"items": {
						"$ref": "#/definitions/AuthenticationAttemptItem"
					}
				}
			}
		},
		"AuthenticationAttemptItem": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the authentication attempt"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object."
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the authenticationAttempt was created within the system."
				},
				"authenticator": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The authenticator which provided the data."
				},
				"type": {
					"type": "string",
					"description": "The type of authentication being performed. This can be 'FIDOAuthenticator', 'Face', 'Voice', 'Voice liveness', 'GPS', 'Pin', 'Possession', 'fingerprint', 'rsaSecurID', 'activeDirectory', 'face-password (image)', 'face-password (text)', 'voice-face (Face)', 'voice-face (Voice)', 'voice-face (Live voice)', 'text-prompted' or 'device'."
				},
				"score": {
					"type": "number",
					"format": "double",
					"description": "If the item is biometric data, then the score represents the biometric match score."
				},
				"fmr": {
					"type": "number",
					"format": "double",
					"description": "The false match rate (FMR) associated with this item"
				},
				"faceData": {
					"type": "array",
					"description": "The photograph(s) of the user involved in the authentication request. This is only returned if an explicit GET of the associated authentication request is made. This attribute is readonly",
					"items": {
						"$ref": "#/definitions/FaceData"
					},
					"x-readonly": "true"
				},
				"voiceData": {
					"type": "array",
					"description": "The voice utterances of the user involved in the authentication request. This is only returned if an explicit GET of the associated authentication request is made. This attribute is readonly",
					"items": {
						"$ref": "#/definitions/VoiceData"
					},
					"x-readonly": "true"
				},
				"challengeDetail": {
					"$ref": "#/definitions/ChallengeDetail",
					"description": "Information about a signing challenge provided by the server to the client for authentication."
				},
				"fidoChallengeDetail": {
					"$ref": "#/definitions/FIDOChallengeDetail",
					"description": "Information about a signing challenge provided by the server to the client for a FIDO authentication."
				},
				"location": {
					"type": "string",
					"description": "Coordinates where the authentication attempt data was submitted by the client. The format will be <latitude>,<longitude>."
				},
				"result": {
					"type": "string",
					"description": "The result for this item"
				},
				"authenticatorCounter": {
					"type": "integer",
					"format": "int64",
					"description": "Number of successful authentications by the FIDO authenticator"
				}
			}
		},
		"ChallengeDetail": {
			"properties": {
				"keyId": {
					"type": "string",
					"description": "The identifier for the key used by the client to sign the challenge provided by the server."
				},
				"deviceId": {
					"type": "string",
					"description": "The identifier for the device that signed the challenge."
				},
				"clientResponse": {
					"type": "string",
					"description": "The challenge response from the client."
				},
				"signatureAlgorithm": {
					"type": "string",
					"description": "The algorithm used by the client to sign the challenge"
				},
				"verified": {
					"type": "boolean",
					"description": "Indicates whether or not the server successully verified the challenge response from the client."
				}
			}
		},
		"FIDOChallengeDetail": {
			"properties": {
				"challenge": {
					"type": "string",
					"description": "Random challenge generated by the server for a FIDO authentication request"
				},
				"secureTransactionContent": {
					"type": "string",
					"description": "Information to be displayed securely to a user. The format of the content is indicated by the secureTransactionContentType property."
				},
				"authReq": {
					"type": "string",
					"description": "FIDO authentication request data, generated by the server"
				},
				"authRes": {
					"type": "string",
					"description": "FIDO authentication response data, generated by the FIDO client"
				},
				"fidoServerData": {
					"type": "string",
					"description": "Data supplied by the relying party to be passed to the FIDO client and verified on return"
				}
			}
		},
		"AuthenticationRequest": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the authentication request. This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the authentication request. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"authenticationRequestId": {
					"type": "string",
					"required": true,
					"description": "An externally provided unique identifier for this authentication request",
					"maxLength": 255,
					"x-sortable": "true"
				},
				"description": {
					"type": "string",
					"description": "A description of the authentication request - if using the IdentityX Authenticator, this will be provided to the user. This attribute is mandatory when creating an authentication request",
					"maxLength": 255,
					"x-mandatory-on-create": true
				},
				"verificationCheckLongitude": {
					"type": "string",
					"description": "The longitude part of a coordinate value restricting the location where an authentication attempt may take place.",
					"maxLength": 50
				},
				"verificationCheckLatitude": {
					"type": "string",
					"description": "The latitude part of a coordinate value restricting the location where an authentication attempt may take place.",
					"maxLength": 50
				},
				"verificationCheckRadius": {
					"type": "integer",
					"format": "int64",
					"description": "The radius from the verification check coordinate where an authentication attempt can be made."
				},
				"verificationResult": {
					"type": "string",
					"description": "An indicator for the overall authentication result. This may be one of 'Y' (successfuly authenticated), 'F' (marked as fraud attempt), 'D' (declined) or 'N' (attempted unsuccessfully). This attribute is readonly",
					"maxLength": 2,
					"x-readonly": "true"
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the authentication request was created within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true",
					"x-sortable": "true"
				},
				"expiration": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the authentication request will expire."
				},
				"availableRetries": {
					"type": "integer",
					"format": "int64",
					"description": "The number of reties still available. This attribute is readonly",
					"x-readonly": "true"
				},
				"totalRetriesAllowed": {
					"type": "integer",
					"format": "int64",
					"description": "The total number of retries available for this authentication request. This attribute is readonly",
					"x-readonly": "true"
				},
				"processed": {
					"type": "string",
					"format": "dateTime",
					"description": "The data and time the authentication was successfully completed, marked as fraud or declined. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"oneTimePasswordEnabled": {
					"type": "boolean",
					"description": "Specifies if an OTP is to be returned on successful authentication of this request. This attribute is readonly",
					"x-readonly": "true"
				},
				"recurring": {
					"type": "boolean",
					"description": "Indicates whether or not this is a recurring transaction."
				},
				"otpTotalRetriesAllowed": {
					"type": "integer",
					"format": "int64",
					"description": "The total number of retires permitted to the user when entering the OTP. This attribute is readonly",
					"x-readonly": "true"
				},
				"otpAvailableRetries": {
					"type": "integer",
					"format": "int64",
					"description": "The number of OTP entry reties available for this authentication request. This attribute is readonly",
					"x-readonly": "true"
				},
				"addAuthenticator": {
					"type": "boolean",
					"description": "Specifies if the purpose of this authentication request is to support adding a new authenticator. This attribute is readonly",
					"x-readonly": "true"
				},
				"type": {
					"type": "enum",
					"enum": [
						"FI",
						"IX"
					],
					"description": "Specifies if the request is a FIDO authentication request (FI) or an IdentityX authentication request (IX). This attribute is mandatory when creating an authentication request",
					"x-mandatory-on-create": true
				},
				"fidoChallenge": {
					"type": "string",
					"description": "A FIDO challenge that must be answered in order to complete the authentication request.",
					"maxLength": 22
				},
				"secureTransactionContent": {
					"type": "string",
					"description": "Information to be displayed securely to a user. The format of the content is indicated by the secureTransactionContentType property.",
					"maxLength": 4000
				},
				"secureTransactionContentType": {
					"type": "string",
					"description": "Describes the value of the secureTransactionContent property. This can be either 'image/png' or 'text/plain'.",
					"maxLength": 50
				},
				"fidoAuthenticationRequest": {
					"type": "string",
					"description": "The FIDO Authentication Request - generated by the server and passed to the FIDO client"
				},
				"fidoAuthenticationResponse": {
					"type": "string",
					"format": "byte",
					"description": "The FIDO Authentication Response - generated by the FIDO client (and authenticators) and passed to the server"
				},
				"serverData": {
					"type": "string",
					"format": "byte",
					"description": "This is data provided by the calling application, which is passed to the FIDO client and back again",
					"maxLength": 2048
				},
				"channelBinding": {
					"$ref": "#/definitions/ChannelBinding",
					"description": "This is used by FIDO in the binding of the TLS channel."
				},
				"notificationURL": {
					"type": "string",
					"description": "If provided, once the authentication request enters a final state, a HTTP Post request is made to this URL",
					"maxLength": 100
				},
				"fidoResponseCode": {
					"type": "integer",
					"format": "int64",
					"description": "FIDO response code indicating the overall result of the authentication request.",
					"x-null-on-create": "true"
				},
				"fidoResponseMsg": {
					"type": "string",
					"description": "Message related to the FIDO response code for this authentication request.",
					"maxLength": 100,
					"x-null-on-create": "true"
				},
				"status": {
					"type": "string",
					"description": "The status associated with this authentication request. This attribute is readonly",
					"enum": [
						"COMPLETED_SUCCESSFUL",
						"COMPLETE_FAILURE",
						"DECLINED",
						"EXPIRED",
						"EXPIRED_FAILURE",
						"EXPIRED_PENDING",
						"FRAUD",
						"PENDING"
					],
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"authenticationAttempts": {
					"type": "array",
					"description": "The authentication attempts associated with this authentication request. This attribute is readonly",
					"items": {
						"$ref": "#/definitions/AuthenticationAttempt"
					},
					"x-readonly": "true"
				},
				"registration": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The registration associated with this authentication request. This attribute is readonly and can be expanded when getting either a single authentication request or collection",
					"x-readonly": "true",
					"x-expandable-in-instance": "true",
					"x-expandable-in-list": "true"
				},
				"policy": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The policy associated with this authentication request. This attribute is readonly and can be expanded when getting either a single authentication request or collection",
					"x-readonly": "true",
					"x-expandable-in-instance": "true",
					"x-expandable-in-list": "true"
				},
				"application": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The application associated with this authentication request - derived from the policy and/or registration. This attribute is readonly and can be expanded when getting either a single authentication request or collection",
					"x-readonly": "true",
					"x-expandable-in-instance": "true",
					"x-expandable-in-list": "true"
				},
				"user": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The user associated with this authentication request - derived from the registration. This attribute is readonly and can be expanded when getting either a single authentication request or collection",
					"x-readonly": "true",
					"x-expandable-in-instance": "true",
					"x-expandable-in-list": "true"
				},
				"tenant": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The tenant associated with this authentication request - derived from the user and application. This attribute is readonly",
					"x-readonly": "true"
				}
			}
		},
		"PageOfAuthenticationRequests": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of authentication attempts"
				},
				"items": {
					"type": "array",
					"description": "The collections of authentication attempts",
					"items": {
						"$ref": "#/definitions/AuthenticationAttempt"
					}
				}
			}
		},
		"ChannelBinding": {
			"properties": {
				"serverEndPoint": {
					"type": "string",
					"description": "The base64 URL-encoded hash of the TLS server certificate, if this is available"
				},
				"tlsServerCertificate": {
					"type": "string",
					"description": "The base64 URL-encoded DER-encoded TLS server certificate, if this data is available to the FIDO UAF client"
				},
				"tlsUnique": {
					"type": "string",
					"description": "The base64 URL-encoded TLS channel Finished structure, if this data is available to the FIDO UAF client"
				},
				"cid_pubkey": {
					"type": "string",
					"description": "The base64 URL-encoded serialized JSON Web Key (JWK) structure"
				}
			}
		},
		"Authenticator": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the authenticator. This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the authenticator. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"authenticatorId": {
					"type": "string",
					"required": true,
					"description": "An externally provided unique identifier for this authenticator.",
					"maxLength": 255,
					"x-sortable": "true"
				},
				"lastUsed": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the authenticator was last used. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"updated": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the authenticator was last updated. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"archived": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the authenticator was archived. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the authenticator was created within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"logicalName": {
					"type": "string",
					"description": "A logical name for this authenticator.",
					"maxLength": 100
				},
				"phoneNumber": {
					"type": "string",
					"description": "A phone number for this authenticator.",
					"maxLength": 50
				},
				"countryCode": {
					"type": "string",
					"description": "The country code associated with this authenticator.",
					"maxLength": 10
				},
				"enrollmentLatitude": {
					"type": "string",
					"description": "The latitude of this authenticator at enrolment.",
					"maxLength": 50
				},
				"enrollmentLongitude": {
					"type": "string",
					"description": "The longitude of this authenticator at enrolment.",
					"maxLength": 50
				},
				"make": {
					"type": "string",
					"description": "The make of this authenticator.",
					"maxLength": 100,
					"x-sortable": "true"
				},
				"model": {
					"type": "string",
					"description": "The model of this authenticator.",
					"maxLength": 100,
					"x-sortable": "true"
				},
				"osVersion": {
					"type": "string",
					"description": "The OS Version on the authenticator.",
					"maxLength": 50
				},
				"frameworkVersion": {
					"type": "string",
					"description": "The version of the IdentityX framework used by the IdentityX-enabled application on the authenticator (not applicable to FIDO).",
					"maxLength": 50
				},
				"appVersion": {
					"type": "string",
					"description": "The version of the IdentityX-enabled application running on the client (not applicable to FIDO).",
					"maxLength": 50
				},
				"tcDisplayPNGCharacteristics": {
					"type": "array",
					"description": "The preferred transaction content display PNG characteristics for this FIDO authenticator. This can be supplied at device registration time.",
					"items": {
						"$ref": "#/definitions/DisplayPNGCharacteristicsDescriptor"
					}
				},
				"fingerprintKeys": {
					"type": "array",
					"description": "The public keys used in the authentication of the device based fingerprint systems",
					"items": {
						"$ref": "#/definitions/PublicKey"
					}
				},
				"deviceKeys": {
					"type": "array",
					"description": "The public keys used in the authentication of the device",
					"items": {
						"$ref": "#/definitions/PublicKey"
					}
				},
				"voiceTextPromptedDigits": {
					"type": "array",
					"description": "The digits spoken by a user on enrollment of the text prompted voice data.",
					"items": {
						"$ref": "#/definitions/VoiceData"
					}
				},
				"authenticatorCounter": {
					"type": "integer",
					"format": "int64",
					"description": "Number of successful authentications by the FIDO authenticator"
				},
				"publicKeyId": {
					"type": "string",
					"description": "The public key identifier associated with this FIDO authenticator.",
					"maxLength": 255
				},
				"publicKey": {
					"type": "string",
					"format": "byte",
					"description": "The public key associated with this FIDO authenticator."
				},
				"status": {
					"type": "enum",
					"description": "The status of the authenticator. This attribute is readonly",
					"enum": [
						"ARCHIVED",
						"ACTIVE",
						"BLOCKED"
					],
					"x-readonly": "true"
				},
				"fidoDeregistrationRequest": {
					"type": "string",
					"description": "The FIDO deregistration request, generated by the server, returned to the relying party on deregistration of a FIDO authenticator(s)"
				},
				"authenticatorType": {
					"$ref": "#/definitions/AuthenticatorType",
					"description": "The authenticator type associated with this authenticator"
				},
				"mutualAuthTLSCertificate": {
					"type": "string",
					"format": "byte",
					"description": "The certificate used to establish a mutual authentication TLS session. This attribute is readonly",
					"x-readonly": "true"
				},
				"pushNotificationToken": {
					"type": "string",
					"format": "byte",
					"description": "The token used for Apple or Google push notifications. This attribute is readonly",
					"x-readonly": "true"
				},
				"registrationChallenge": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The registration challenge associated with this authenticator. This attribute is readonly",
					"x-readonly": "true"
				},
				"registration": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The registration associated with this authenticator. This attribute is readonly",
					"x-readonly": "true"
				},
				"application": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The application associated with this authenticator - derived from the registration challenge. This attribute is readonly and can be expanded when getting either a single authenticator or collection",
					"x-expandable-in-instance": "true",
					"x-expandable-in-list": "true",
					"x-readonly": "true"
				},
				"user": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The user associated with this authenticator - derived from the registration challenge. This attribute is readonly and can be expanded when getting either a single authenticator or collection",
					"x-expandable-in-instance": "true",
					"x-expandable-in-list": "true",
					"x-readonly": "true"
				},
				"tenant": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The tenant associated with this authentication request - derived from the user and application. This attribute is readonly",
					"x-readonly": "true"
				},
				"tenantAuthenticatorType": {
					"$ref": "#/definitions/ResourceLink",
					"description": "FIDO - If this authenticator is a FIDO authenticator, this specifies the type of the authenticator. This attribute is readonly",
					"x-readonly": "true"
				}
			}
		},
		"PageOfAuthenticators": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of authenticators"
				},
				"items": {
					"type": "array",
					"description": "The collections of authenticators",
					"items": {
						"$ref": "#/definitions/Authenticator"
					}
				}
			}
		},
		"DataHolder": {
			"properties": {
				"value": {
					"type": "string",
					"format": "byte",
					"description": "Value of the protected, senstive data."
				}
			}
		},
		"PublicKey": {
			"properties": {
				"identifier": {
					"type": "string",
					"description": "An identifier for a key pair."
				},
				"algorithm": {
					"type": "string",
					"description": "The algorithm used to generate the key pair."
				},
				"provider": {
					"type": "string",
					"description": "The provider that generated the key pair."
				},
				"value": {
					"type": "string",
					"format": "byte",
					"description": "The encoded value of the public key."
				}
			}
		},
		"AuthenticatorType": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the authenticator type. This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the authenticator type. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"name": {
					"type": "string",
					"description": "The name of the authenticator type.",
					"maxLength": 50,
					"x-sortable": "true"
				},
				"description": {
					"type": "string",
					"description": "A description of this authenticator type. This attribute is mandatory when creating an authenticator type",
					"maxLength": 100,
					"x-mandatory-on-create": true
				},
				"vendorName": {
					"type": "string",
					"description": "The vendor providing this authenticator type.",
					"maxLength": 50,
					"x-sortable": "true"
				},
				"updated": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the authenticator type was last updated. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"archived": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the authenticator type was archived. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the authenticator type was created within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-sortable": "true",
					"x-readonly": "true"
				},
				"aaid": {
					"type": "string",
					"required": false,
					"description": "The FIDO AAID (Authenticator Attestation Identifier) of this authenticator type. This attribute is mandatory when creating an authenticator type",
					"maxLength": 0,
					"x-mandatory-on-create": true,
					"x-sortable": "true"
				},
				"authenticatorVersion": {
					"type": "integer",
					"format": "int64",
					"description": "The earliest trustworthy authenticator version meeting the requirements of this authenticator type. This attribute is mandatory when creating an authenticator type",
					"x-mandatory-on-create": true
				},
				"upv": {
					"type": "array",
					"description": "The UAF protocol versions supported by this authenticator type.",
					"items": {
						"$ref": "#/definitions/FIDOVersion"
					}
				},
				"assertionScheme": {
					"type": "string",
					"description": "The FIDO assertion scheme supported by this authenticator type. This attribute is mandatory when creating an authenticator type",
					"maxLength": 50,
					"x-mandatory-on-create": true
				},
				"authenticationAlgorithm": {
					"type": "integer",
					"format": "int64",
					"description": "The authentication algorithm supported by this authenticator type. This attribute is mandatory when creating an authenticator type",
					"x-mandatory-on-create": true
				},
				"publicKeyAlgAndEncoding": {
					"type": "integer",
					"format": "int64",
					"description": "The public key format and encoding used by this authenticator type during registration operations. This attribute is mandatory when creating an authenticator type",
					"x-mandatory-on-create": true
				},
				"attestationTypes": {
					"type": "array",
					"description": "The attestation types supported by this authenticator type.",
					"items": {
						"type": "integer",
						"format": "int64"
					}
				},
				"userVerificationDetails": {
					"type": "array",
					"description": "A list of alternative Verification Method Combinations supported by this authenticator type. Each entry is one alternative user verification method. This attribute is mandatory when creating an authenticator type",
					"x-mandatory-on-create": true,
					"items": {
						"type": "array",
						"items": {
							"$ref": "#/definitions/VerificationMethodDescriptor"
						}
					}
				},
				"keyProtection": {
					"type": "integer",
					"format": "int64",
					"description": "The key protection supported by this authenticator type. This is a 16 bit number representing the bit fields defined by the FIDO key protection constants. This attribute is mandatory when creating an authenticator type",
					"x-mandatory-on-create": true
				},
				"matcherProtection": {
					"type": "integer",
					"format": "int64",
					"description": "The matcher protection supported by this authenticator type. This is a 16 bit number representing the bit fields defined by the FIDO matcher protection constants. This attribute is mandatory when creating an authenticator type",
					"x-mandatory-on-create": true
				},
				"attachmentHint": {
					"type": "integer",
					"format": "int64",
					"description": "An attachment hint provided by this authenticator type. This is a 32 bit number representing the bit fields defined by the FIDO matcher protection constants. This attribute is mandatory when creating an authenticator type",
					"x-mandatory-on-create": true
				},
				"isSecondFactorOnly": {
					"type": "boolean",
					"description": "Determines if this authenticator type can only be used as a second factor. This attribute is mandatory when creating an authenticator type",
					"x-mandatory-on-create": true
				},
				"supportedExtensionIds": {
					"type": "string",
					"description": "A list of IDs of extensions supported by this authenticator type",
					"maxLength": 500
				},
				"tcDisplay": {
					"type": "integer",
					"format": "int64",
					"description": "Transaction confirmation display for this authenticator type. This is a 16 bit number representing the bit fields defined by the FIDO transaction confirmation display constants. This attribute is mandatory when creating an authenticator type",
					"x-mandatory-on-create": true
				},
				"tcDisplayContentType": {
					"type": "string",
					"description": "MIME content type for transaction confirmation by this authenticator type. Currently the supported values are text/plain and image/png",
					"maxLength": 50
				},
				"tcDisplayPNGCharacteristics": {
					"type": "array",
					"description": "A list of alternative supported image characteristics for displaying a PNG image on this authenticator type.",
					"items": {
						"$ref": "#/definitions/DisplayPNGCharacteristicsDescriptor"
					}
				},
				"attestationRootCertificates": {
					"type": "array",
					"description": "A list of PKIX trust root X.509 certificates that are valid for the AAIDs of this Authenticator Type. This is not a certificate chain but the trust anchors of that chain. This attribute is mandatory when creating an authenticator type",
					"x-mandatory-on-create": true,
					"items": {
						"type": "string"
					}
				},
				"icon": {
					"type": "string",
					"description": "The icon representing this authenticator type."
				},
				"status": {
					"type": "enum",
					"description": "The status of this authenticator type. This attribute is readonly",
					"enum": [
						"ACTIVE",
						"ARCHIVED",
						"BLOCKED"
					],
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"tenant": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The tenant containing this authenticator type. This attribute is readonly",
					"x-readonly": "true"
				}
			}
		},
		"PageOfAuthenticatorTypes": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of authenticator types"
				},
				"items": {
					"type": "array",
					"description": "The collection of authenticator types",
					"items": {
						"$ref": "#/definitions/AuthenticatorType"
					}
				}
			}
		},
		"Error": {
			"properties": {
				"httpStatus": {
					"type": "string",
					"description": "The HTTP status code"
				},
				"message": {
					"type": "string",
					"description": "A short, easy to understand error message that could be shown directly to users of your application"
				},
				"developerMessage": {
					"type": "string",
					"description": "A more detailed explanation which may include technical details, aimed at developers using the API"
				},
				"code": {
					"type": "string",
					"description": "A Daon-specific error code"
				},
				"moreInfo": {
					"type": "string",
					"description": "A URL pointing to further information about this error (if available)"
				}
			}
		},
		"PKCS12Data": {
			"properties": {
				"commonName": {
					"type": "string",
					"description": "The common name (CN) of the certification in the PKCS#12 associated with the application."
				},
				"country": {
					"type": "string",
					"description": "The country (C) of the certification in the PKCS#12 associated with the application."
				},
				"location": {
					"type": "string",
					"description": "The location (LN) of the certification in the PKCS#12 associated with the application."
				},
				"organizationUnit": {
					"type": "string",
					"description": "The organization unit (OU) of the certification in the PKCS#12 associated with the application."
				},
				"state": {
					"type": "string",
					"description": "The state (S) of the certification in the PKCS#12 associated with the application."
				},
				"password": {
					"type": "string",
					"description": "The password to to the PKCS#12 which will be generated."
				},
				"p12Data": {
					"type": "string",
					"format": "byte",
					"description": "The PKCS#12 file."
				}
			}
		},
		"PageMetadata": {
			"properties": {
				"limit": {
					"type": "integer",
					"format": "int64",
					"description": "A limit on the number of items to be returned. The default value is 20."
				},
				"page": {
					"type": "integer",
					"format": "int64",
					"description": "The page number in the entire collection to return. The default value is 1 (the first page)"
				},
				"totalCount": {
					"type": "integer",
					"format": "int64",
					"description": "The total number of items in the collection"
				}
			}
		},
		"PagePaging": {
			"properties": {
				"first": {
					"type": "string",
					"description": "The location of the first page in the collection. This will be null if there is only one page, or if the current page is also the first page"
				},
				"previous": {
					"type": "string",
					"description": "The location of the previous page in the collection. This will be null if there is only one page, or if the current page is also the first page"
				},
				"next": {
					"type": "string",
					"description": "The location of the next page in the collection. This will be null if there is only one page, or if the current page is also the last page"
				},
				"last": {
					"type": "string",
					"description": "The location of the last page in the collection. This will be null if there is only one page, or if the current page is also the last page"
				}
			}
		},
		"ResourceLink": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the resource"
				}
			}
		},
		"PageOfResourcesLink": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of this page of resources"
				}
			}
		},
		"Policy": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the policy. This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the policy. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"policyId": {
					"type": "string",
					"description": "The external identifier of the policy and is unique within the application. This attribute is mandatory when creating a policy",
					"maxLength": 50,
					"x-mandatory-on-create": true,
					"x-sortable": "true"
				},
				"description": {
					"type": "string",
					"description": "A description of this policy.",
					"maxLength": 255
				},
				"otpRetryAttempts": {
					"type": "integer",
					"format": "int32",
					"description": "The number of attempts available to retry an OTP associated with a completed authentication request."
				},
				"retryAttempts": {
					"type": "integer",
					"format": "int32",
					"description": "The default number of attempts available to retry an authentication request created for this policy. This may be overriden by the authentication request."
				},
				"updated": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the policy was last updated. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"archived": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the policy was archived. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the policy was created within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-sortable": "true",
					"x-readonly": "true"
				},
				"timeToLive": {
					"type": "integer",
					"format": "int64",
					"description": "Unit minutes?"
				},
				"type": {
					"type": "enum",
					"description": "Determines the type of this policy. Possible values are 'FR' (FIDO Registration), 'FA' (FIDO Authentication), 'IE' (IdentityX Enrollment), 'IA' (IdentityX Authentication). This attribute is mandatory when creating a policy",
					"enum": [
						"FR",
						"FA",
						"IE",
						"IA"
					],
					"x-mandatory-on-create": true
				},
				"status": {
					"type": "enum",
					"description": "The status of the policy.",
					"enum": [
						"ARCHIVED",
						"BLOCKED",
						"ACTIVE"
					]
				},
				"legacyAuthenticationPolicy": {
					"$ref": "#/definitions/LegacyAuthenticationPolicy",
					"description": "This is a legacy ..."
				},
				"activityDefinition": {
					"type": "string",
					"description": "The advanced enrollment or authentication policy content."
				},
				"factorsDefinition": {
					"type": "string",
					"description": "Additional information used by the 'scripts' property regarding which authentication factors will be applied."
				},
				"scripts": {
					"type": "string",
					"description": "A JSON object defining script names to execute during enrollment and authentication."
				},
				"fidoPolicy": {
					"type": "string",
					"description": "The FIDO policy which specifies the match criteria for registration or authentication"
				},
				"application": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The application associated with this policy. This attribute is readonly and can be expanded when getting either a single policy or collection",
					"x-expandable-in-instance": "true",
					"x-expandable-in-list": "true",
					"x-readonly": "true"
				},
				"tenant": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The tenant associated with this policy - derived from the application. This attribute is readonly",
					"x-readonly": "true"
				},
				"authenticationRequests": {
					"$ref": "#/definitions/PageOfResourcesLink",
					"description": "The authentication requests associated with this policy. This attribute is readonly",
					"x-readonly": "true"
				}
			}
		},
		"LegacyAuthenticationPolicy": {
			"properties": {
				"voiceEnabled": {
					"type": "boolean",
					"description": "Indicates whether or not voice enrollment or authentication will be enabled for this policy."
				},
				"voiceLivenessEnabled": {
					"type": "boolean",
					"description": "Indicates whether or not voice liveness authentication will be enabled for this policy."
				},
				"faceEnabled": {
					"type": "boolean",
					"description": "Indicates whether or not face enrollment or authentication will be enabled for this policy."
				},
				"gpsEnabled": {
					"type": "boolean",
					"description": "Indicates whether or not GPS authentication will be enabled for this policy."
				},
				"pinEnabled": {
					"type": "boolean",
					"description": "Indicates whether or not PIN enrollment or authentication will be enabled for this policy."
				},
				"smsVerificationEnabled": {
					"type": "boolean",
					"description": "Indicates whether or not SMS authentication will be enabled for this policy."
				}
			}
		},
		"PageOfPolicies": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of policies"
				},
				"items": {
					"type": "array",
					"description": "The collections of policies",
					"items": {
						"$ref": "#/definitions/Policy"
					}
				}
			}
		},
		"Registration": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the registration. This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the registration. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"registrationId": {
					"type": "string",
					"description": "The externally provided identifier for the registration. This identifier is unique within an application. This attribute is mandatory when creating a registration",
					"maxLength": 255,
					"x-mandatory-on-create": true,
					"x-sortable": "true"
				},
				"archived": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the registration was archived. This attribute is readonly",
					"x-readonly": "true"
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the registration was created within the system. This attribute is readonly",
					"x-readonly": "true"
				},
				"status": {
					"type": "enum",
					"description": "The status of the registration. This attribute is readonly",
					"enum": [
						"ACTIVE",
						"ARCHIVED",
						"BLOCKED"
					],
					"x-readonly": "true"
				},
				"application": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The application associated with this registration. This attribute is readonly and can be expanded when getting either a single registration or collection",
					"x-expandable-in-instance": "true",
					"x-expandable-in-list": "true",
					"x-readonly": "true"
				},
				"user": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The user associated with this registration. This attribute is readonly and can be expanded when getting either a single registration or collection",
					"x-expandable-in-instance": "true",
					"x-expandable-in-list": "true",
					"x-readonly": "true"
				},
				"tenant": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The tenant associated with this registration - derived from the application and user. This attribute is readonly",
					"x-readonly": "true"
				},
				"authenticationRequests": {
					"$ref": "#/definitions/PageOfResourcesLink",
					"description": "The authentication requests associated with this registration. This attribute is readonly and can be expanded when getting a single registration",
					"x-expandable-in-instance": "true",
					"x-readonly": "true"
				}
			}
		},
		"PageOfRegistrations": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of registrations"
				},
				"items": {
					"type": "array",
					"description": "The collections of registrations",
					"items": {
						"$ref": "#/definitions/Registration"
					}
				}
			}
		},
		"RegistrationChallenge": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the registration challenge. This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the registration challenge. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"challenge": {
					"type": "string",
					"description": "The challenge generated by the system",
					"maxLength": 22,
					"x-null-on-create": "true"
				},
				"fidoRegistrationRequest": {
					"type": "string",
					"description": "The system generated FIDO registration request to be sent to the FIDO client",
					"x-null-on-create": "true"
				},
				"fidoRegistrationResponse": {
					"type": "string",
					"description": "The FIDO registration response as returned by the FIDO client",
					"x-null-on-create": "true"
				},
				"status": {
					"type": "enum",
					"description": "The status of the registration challenge. This attribute is readonly",
					"enum": [
						"ACTIVE",
						"ARCHIVED",
						"COMPLETED_FAILURE",
						"COMPLETED_SUCCESSFUL",
						"EXPIRED",
						"PENDING"
					],
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"tlsCertificate": {
					"type": "string",
					"format": "byte",
					"description": "The TLS server certificate."
				},
				"tlsUnique": {
					"type": "string",
					"description": "The base 64 URL encoded TLS Channel Finished structure"
				},
				"cidPublicKey": {
					"type": "string",
					"format": "byte",
					"description": "The JSON Web Key encoding of the elliptic curve public key"
				},
				"serverData": {
					"type": "string",
					"format": "byte",
					"description": "Data provided by the replying party to be passed to the FIDO client."
				},
				"fidoRegResponseCode": {
					"type": "integer",
					"format": "int64",
					"description": "A response code indicating the result of the registration operation",
					"x-null-on-create": "true"
				},
				"fidoRegResponseMsg": {
					"type": "string",
					"description": "A response message desscribing the result of the registration operation",
					"x-null-on-create": "true"
				},
				"archived": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the registration challenge became archived. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"updated": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the registration challenge was last updated within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the registration challenge was created within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"registration": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The registration associated with this registration challenge. This attribute is readonly",
					"x-readonly": "true"
				},
				"policy": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The registration policy associated with this registration challenge. This attribute is readonly",
					"x-readonly": "true"
				},
				"tenant": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The tenant associated with this registration - derived from the application and user. This attribute is readonly",
					"x-readonly": "true"
				}
			}
		},
		"PageOfRegistrationChallenges": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of registration challenges"
				},
				"items": {
					"type": "array",
					"description": "The collections of registration challenges",
					"items": {
						"$ref": "#/definitions/RegistrationChallenge"
					}
				}
			}
		},
		"Role": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the role. This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the role. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"externalId": {
					"type": "string",
					"description": "External Id is a field used to assign this role to an external source of roles such as an LDAP or Active Directory group.  This is the entry within the external source.",
					"maxLength": 2048
				},
				"name": {
					"type": "string",
					"description": "The name of this role. This attribute is mandatory when creating a role",
					"maxLength": 1024,
					"x-mandatory-on-create": true,
					"x-sortable": "true"
				},
				"description": {
					"type": "string",
					"description": "The description of this role. This attribute is mandatory when creating a role",
					"maxLength": 255,
					"x-mandatory-on-create": true
				},
				"status": {
					"type": "enum",
					"description": "The status of the role. This attribute is readonly",
					"enum": [
						"BLOCKED",
						"ACTIVE"
					],
					"x-readonly": "true"
				},
				"archived": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the role was archived. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"permissions": {
					"type": "array",
					"description": "The fine-grained permissions associated with this role",
					"items": {
						"$ref": "#/definitions/Permission"
					}
				},
				"tenant": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The tenant associated with this registration - derived from the application and user. This attribute is readonly",
					"x-readonly": "true"
				}
			}
		},
		"Permission": {
			"properties": {
				"entity": {
					"type": "enum",
					"description": "The entity against which this permission is to be granted",
					"enum": [
						"*",
						"APPLICATION",
						"AUDIT",
						"AUTHENTICATION_ATTEMPT",
						"AUTHENTICATION_REQUEST",
						"AUTHENTICATOR",
						"AUTHENTICATOR_TYPE",
						"POLICY",
						"ROLE",
						"TENANT",
						"TOKEN",
						"USER"
					]
				},
				"operation": {
					"type": "enum",
					"description": "The operations permitted by this permission",
					"enum": [
						"*",
						"GET",
						"CREATE",
						"UPDATE",
						"DELETE"
					]
				},
				"permissionSelector": {
					"type": "string",
					"description": "The instances of the entity against which this permission is to be granted"
				}
			}
		},
		"PageOfRoles": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of roles"
				},
				"items": {
					"type": "array",
					"description": "The collections of roles",
					"items": {
						"$ref": "#/definitions/Role"
					}
				}
			}
		},
		"Sponsorship": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the sponsorship. This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the sponsorship. This attribute is readonly",
					"x-readonly": "true"
				},
				"registrationId": {
					"type": "string",
					"description": "The unique identifier of the registration.",
					"maxLength": 255
				},
				"userId": {
					"type": "string",
					"description": "The unique identifier of the user.",
					"maxLength": 50
				},
				"authenticationRequestId": {
					"type": "string",
					"description": "The unique identifier of the authentication request.",
					"maxLength": 255
				},
				"sponsorUserId": {
					"type": "string",
					"description": "The unique identifier of the sponsoring user.",
					"maxLength": 50
				},
				"type": {
					"type": "string",
					"description": "The type of sponsorship. This attribute is mandatory when creating a sponsorship",
					"maxLength": 50,
					"x-mandatory-on-create": true
				},
				"sponsorshipToken": {
					"type": "string",
					"description": "A unique token that can be used by the sponsored user to complete the sponsorship.",
					"maxLength": 50
				},
				"expiration": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time at which this sponsorship will expire.",
					"x-sortable": "true"
				},
				"availableRetries": {
					"type": "integer",
					"format": "int64",
					"description": "The number of retries available for the sponsored user to complete the sponsorship."
				},
				"status": {
					"type": "enum",
					"description": "The status of the sponsorship. This attribute is readonly",
					"enum": [
						"COMPLETED",
						"EXPIRED",
						"PENDING"
					],
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"sponsorship": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time at which this sponsorship was completed. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"totalRetriesAllowed": {
					"type": "integer",
					"format": "int64",
					"description": "The number of retries allowed for the sponsored user to complete the sponsorship. This attribute is readonly",
					"x-readonly": "true"
				},
				"createRegistrationEnabled": {
					"type": "boolean",
					"description": "Indicates whether or not a registration should be created between the user and the application once the sponsorship has completed. This attribute is readonly",
					"x-readonly": "true"
				},
				"sponsorshipLastVerified": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time at which the sponsorship was last verified. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"certificateCreated": {
					"type": "boolean",
					"description": "Indicates whether or not a certificate has been created. This attribute is readonly",
					"x-readonly": "true"
				},
				"clientApplicationIdentifier": {
					"type": "string",
					"description": "An identifier for the client application.",
					"maxLength": 50
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time at which this sponsorship was created. This attribute is readonly",
					"x-readonly": "true",
					"x-sortable": "true"
				},
				"qrCode": {
					"type": "string",
					"format": "byte",
					"description": "A JPG image of a QR code which can be used by a user to proceed with the sponsorship. This attribute is readonly",
					"x-readonly": "true"
				},
				"captureDataBlock": {
					"type": "object",
					"additionalProperties": {
						"type": "string",
						"format": "byte"
					},
					"x-readonly": "true"
				},
				"auditData": {
					"type": "object",
					"additionalProperties": {
						"type": "string",
						"format": "byte"
					}
				},
				"sponsorshipCompleted": {
					"type": "boolean",
					"description": "Indicates whether or not the sponsorship has been completed. This attribute is readonly",
					"x-readonly": "true"
				},
				"application": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The application associated with this sponsorship. This attribute is readonly and can be expanded when getting either a single sponsorship or collection",
					"x-expandable-in-instance": "true",
					"x-expandable-in-list": "true",
					"x-readonly": "true"
				},
				"policy": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The policy associated with this sponsorship. This attribute is readonly and can be expanded when getting either a single sponsorship or collection",
					"x-expandable-in-instance": "true",
					"x-expandable-in-list": "true",
					"x-readonly": "true"
				},
				"tenant": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The tenant associated with this sponsorship. This attribute is readonly",
					"x-readonly": "true"
				}
			}
		},
		"PageOfSponsorships": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of sponsorships."
				},
				"items": {
					"type": "array",
					"description": "The collections of sponsorships.",
					"items": {
						"$ref": "#/definitions/Sponsorship"
					}
				}
			}
		},
		"SystemAuthenticatorType": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the system authenticator type. This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the system authenticator type. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"name": {
					"type": "string",
					"description": "The name of the system authenticator type.",
					"maxLength": 50,
					"x-sortable": "true"
				},
				"description": {
					"type": "string",
					"description": "A description of this system authenticator type. This attribute is mandatory when creating a system authenticator type",
					"maxLength": 100,
					"x-mandatory-on-create": true
				},
				"vendorName": {
					"type": "string",
					"description": "The vendor providing this system authenticator type.",
					"maxLength": 50,
					"x-sortable": "true"
				},
				"updated": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the system authenticator type was last updated. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"archived": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the system authenticator type was archived. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the system authenticator type was created within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-sortable": "true",
					"x-readonly": "true"
				},
				"aaid": {
					"type": "string",
					"required": false,
					"description": "The FIDO AAID (Authenticator Attestation Identifier) of this system authenticator type. This attribute is mandatory when creating a system authenticator type",
					"maxLength": 0,
					"x-mandatory-on-create": true,
					"x-sortable": "true"
				},
				"authenticatorVersion": {
					"type": "integer",
					"format": "int64",
					"description": "The earliest trustworthy authenticator version meeting the requirements of this system authenticator type. This attribute is mandatory when creating a system authenticator type",
					"x-mandatory-on-create": true
				},
				"upv": {
					"type": "array",
					"description": "The UAF protocol versions supported by this system authenticator type.",
					"items": {
						"$ref": "#/definitions/FIDOVersion"
					}
				},
				"assertionScheme": {
					"type": "string",
					"description": "The FIDO assertion scheme supported by this system authenticator type. This attribute is mandatory when creating a system authenticator type",
					"maxLength": 50,
					"x-mandatory-on-create": true
				},
				"authenticationAlgorithm": {
					"type": "integer",
					"format": "int64",
					"description": "The authentication algorithm supported by this system authenticator type. This attribute is mandatory when creating a system authenticator type",
					"x-mandatory-on-create": true
				},
				"publicKeyAlgAndEncoding": {
					"type": "integer",
					"format": "int64",
					"description": "The public key format and encoding used by this system authenticator type during registration operations. This attribute is mandatory when creating a system authenticator type",
					"x-mandatory-on-create": true
				},
				"attestationTypes": {
					"type": "array",
					"description": "The attestation types supported by this system authenticator type.",
					"items": {
						"type": "integer",
						"format": "int64"
					}
				},
				"userVerificationDetails": {
					"type": "array",
					"description": "A list of alternative Verification Method Combinations supported by this system authenticator type. Each entry is one alternative user verification method. This attribute is mandatory when creating a system authenticator type",
					"x-mandatory-on-create": true,
					"items": {
						"type": "array",
						"items": {
							"$ref": "#/definitions/VerificationMethodDescriptor"
						}
					}
				},
				"keyProtection": {
					"type": "integer",
					"format": "int64",
					"description": "The key protection supported by this system authenticator type. This is a 16 bit number representing the bit fields defined by the FIDO key protection constants. This attribute is mandatory when creating a system authenticator type",
					"x-mandatory-on-create": true
				},
				"matcherProtection": {
					"type": "integer",
					"format": "int64",
					"description": "The matcher protection supported by this system authenticator type. This is a 16 bit number representing the bit fields defined by the FIDO matcher protection constants. This attribute is mandatory when creating a system authenticator type",
					"x-mandatory-on-create": true
				},
				"attachmentHint": {
					"type": "integer",
					"format": "int64",
					"description": "An attachment hint provided by this system authenticator type. This is a 32 bit number representing the bit fields defined by the FIDO matcher protection constants. This attribute is mandatory when creating a system authenticator type",
					"x-mandatory-on-create": true
				},
				"isSecondFactorOnly": {
					"type": "boolean",
					"description": "Determines if this system authenticator type can only be used as a second factor. This attribute is mandatory when creating a system authenticator type",
					"x-mandatory-on-create": true
				},
				"supportedExtensionIds": {
					"type": "string",
					"description": "A list of IDs of extensions supported by this system authenticator type",
					"maxLength": 500
				},
				"tcDisplay": {
					"type": "integer",
					"format": "int64",
					"description": "Transaction confirmation display for this system authenticator type. This is a 16 bit number representing the bit fields defined by the FIDO transaction confirmation display constants. This attribute is mandatory when creating a system authenticator type",
					"x-mandatory-on-create": true
				},
				"tcDisplayContentType": {
					"type": "string",
					"description": "MIME content type for transaction confirmation by this system authenticator type. Currently the supported values are text/plain and image/png",
					"maxLength": 50
				},
				"tcDisplayPNGCharacteristics": {
					"type": "array",
					"description": "A list of alternative supported image characteristics for displaying a PNG image on this system authenticator type.",
					"items": {
						"$ref": "#/definitions/DisplayPNGCharacteristicsDescriptor"
					}
				},
				"attestationRootCertificates": {
					"type": "array",
					"description": "A list of PKIX trust root X.509 certificates that are valid for the AAIDs of this system Authenticator Type. This is not a certificate chain but the trust anchors of that chain. This attribute is mandatory when creating a system authenticator type",
					"x-mandatory-on-create": true,
					"items": {
						"type": "string"
					}
				},
				"icon": {
					"type": "string",
					"description": "The icon representing this system authenticator type."
				},
				"status": {
					"type": "enum",
					"description": "The status of this system authenticator type. This attribute is readonly",
					"enum": [
						"ACTIVE",
						"ARCHIVED",
						"BLOCKED"
					],
					"x-null-on-create": "true",
					"x-readonly": "true"
				}
			}
		},
		"DisplayPNGCharacteristicsDescriptor": {
			"properties": {
				"width": {
					"type": "integer",
					"format": "int64",
					"description": "Image width."
				},
				"height": {
					"type": "integer",
					"format": "int64",
					"description": "Image height."
				},
				"bitDepth": {
					"type": "integer",
					"format": "int32",
					"description": "Bit depth of image. The bits per sample or per palette index."
				},
				"colorType": {
					"type": "integer",
					"format": "int32",
					"description": "PNG image type."
				},
				"compression": {
					"type": "integer",
					"format": "int32",
					"description": "Compression method used to compress the image data."
				},
				"filter": {
					"type": "integer",
					"format": "int32",
					"description": "Filter method is the preprocessing method applied to the image data before compression."
				},
				"interlace": {
					"type": "integer",
					"format": "int32",
					"description": "The interlace method which is the transmission order of the image data."
				},
				"plte": {
					"type": "array",
					"description": "1 to 256 RGB Palette Entries",
					"items": {
						"$ref": "#/definitions/RgbPalletteEntry"
					}
				}
			}
		},
		"VerificationMethodDescriptor": {
			"properties": {
				"userVerification": {
					"type": "integer",
					"format": "int64",
					"description": "A single user verify constant as defined by the FIDO UAF Specification. This is not a bit flag combination."
				},
				"caDesc": {
					"$ref": "#/definitions/CodeAccuracyDescriptor"
				},
				"baDesc": {
					"$ref": "#/definitions/BiometricAccuracyDescriptor"
				},
				"paDesc": {
					"$ref": "#/definitions/PatternAccuracyDescriptor"
				}
			}
		},
		"CodeAccuracyDescriptor": {
			"properties": {
				"base": {
					"type": "integer",
					"format": "int32",
					"description": "The numeric system base (radix) of the code, e.g. 10 in the case of decimal digits."
				},
				"minLength": {
					"type": "integer",
					"format": "int32",
					"description": "The minimum number of digits of the given base required for that code, e.g. 4 in the case of 4 digits."
				},
				"maxRetries": {
					"type": "integer",
					"format": "int32",
					"description": "Maximum number of false attempts before the authenticator will block this method (at least temporarily). 0 means it will never block."
				},
				"blockSlowdown": {
					"type": "integer",
					"format": "int32",
					"description": "Enforced minimum number of seconds wait time after blocking (e.g. due to forced reboot or similar). 0 means the user verification method will be blocked, either permanently or until an alternative user verification method succeeded."
				}
			}
		},
		"BiometricAccuracyDescriptor": {
			"properties": {
				"FAR": {
					"type": "number",
					"format": "double",
					"description": "The False Acceptance Rate for a single reference data set, i.e. the percentage of non-matching data sets that are accepted as valid ones. A FAR of 0.1% would be encoded as 0.001."
				},
				"FRR": {
					"type": "number",
					"format": "double",
					"description": "The False Rejection Rate for a single reference data set, i.e. the percentage of presented valid data sets that lead to a (false) non-acceptance. A FRR of 0.1% would be encoded as 0.001."
				},
				"EER": {
					"type": "number",
					"format": "double",
					"description": "The Equal Error Rate for a single reference data set."
				},
				"FAAR": {
					"type": "number",
					"format": "double",
					"description": "The False Artifact Acceptance Rate, i.e. the percentage of artifacts that are incorrectly accepted by the system. A FAAR of 0.1% would be encoded as 0.001."
				},
				"maxReferenceDataSets": {
					"type": "integer",
					"format": "int32",
					"description": "Maximum number of alternative reference data sets, e.g. 3 if the user is allowed to enroll 3 different fingers to a fingerprint based authenticator."
				},
				"maxRetries": {
					"type": "integer",
					"format": "int32",
					"description": "Maximum number of false attempts before the authenticator will block this method (at least temporarily). 0 means it will never block."
				},
				"blockSlowdown": {
					"type": "integer",
					"format": "int32",
					"description": "Enforced minimum number of seconds wait time after blocking (e.g. due to forced reboot or similar). 0 means the user verification method will be blocked, either permanently or until an alternative user verification method succeeded."
				}
			}
		},
		"PatternAccuracyDescriptor": {
			"properties": {
				"minComplexity": {
					"type": "integer",
					"format": "int64",
					"description": "Number of possible patterns (having the minimum length) out of which exactly one would be the right one, i.e. 1/probability in the case of equal distribution."
				},
				"maxRetries": {
					"type": "integer",
					"format": "int32",
					"description": "Maximum number of false attempts before the authenticator will block this method (at least temporarily). 0 means it will never block."
				},
				"blockSlowdown": {
					"type": "integer",
					"format": "int32",
					"description": "Enforced minimum number of seconds wait time after blocking (e.g. due to forced reboot or similar). 0 means the user verification method will be blocked, either permanently or until an alternative user verification method succeeded."
				}
			}
		},
		"RgbPalletteEntry": {
			"properties": {
				"r": {
					"type": "integer",
					"format": "int32",
					"description": "Red channel sample value"
				},
				"g": {
					"type": "integer",
					"format": "int32",
					"description": "Green channel sample value"
				},
				"b": {
					"type": "integer",
					"format": "int32",
					"description": "Blue channel sample value"
				}
			}
		},
		"FIDOVersion": {
			"properties": {
				"major": {
					"type": "integer",
					"format": "int32",
					"description": "Major version, 1 for current UAF specification."
				},
				"minor": {
					"type": "integer",
					"format": "int32",
					"description": "Minor version, 0 for current UAF specification."
				}
			}
		},
		"PageOfSystemAuthenticatorTypes": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of system authenticator types"
				},
				"items": {
					"type": "array",
					"description": "The collection of system authenticator types",
					"items": {
						"$ref": "#/definitions/SystemAuthenticatorType"
					}
				}
			}
		},
		"Tenant": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the tenant. This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the tenant. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"name": {
					"type": "string",
					"required": true,
					"description": "An externally provided unique identifier for the tenant.  This a case insensitive field. This attribute is mandatory when creating a tenant",
					"maxLength": 50,
					"x-mandatory-on-create": true,
					"x-sortable": "true"
				},
				"domainId": {
					"type": "string",
					"description": "The unique domain identifier with this tenant.  This a case insensitive field. This attribute is mandatory when creating a tenant",
					"maxLength": 22,
					"x-mandatory-on-create": true,
					"x-sortable": "true"
				},
				"archived": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the tenant was archived within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the tenant was created within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-sortable": "true",
					"x-readonly": "true"
				},
				"updated": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the tenant was last updated within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"status": {
					"type": "enum",
					"description": "Specifies the state of the tenant. This attribute is readonly",
					"enum": [
						"ACTIVE",
						"ARCHIVED",
						"BLOCKED"
					],
					"x-sortable": "true",
					"x-readonly": "true"
				}
			}
		},
		"PageOfTenants": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of tenants"
				},
				"items": {
					"type": "array",
					"description": "The collections of tenants",
					"items": {
						"$ref": "#/definitions/Tenant"
					}
				}
			}
		},
		"Token": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the token. This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the token. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"sharedKeyId": {
					"type": "string",
					"description": "The unique identifier of the token",
					"x-null-on-create": "true"
				},
				"encryptedSharedKey": {
					"type": "string",
					"description": "The encrypted shared secret belonging to this token",
					"x-null-on-create": "true"
				},
				"publicKey": {
					"type": "string",
					"description": "The public key submited which was used to encrypt this shared secret in transit. This attribute is mandatory when creating a token",
					"x-mandatory-on-create": true
				},
				"archived": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the token was archived. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"expiration": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the token will expire. This attribute is readonly",
					"x-sortable": "true",
					"x-readonly": "true"
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the token was created within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-sortable": "true",
					"x-readonly": "true"
				},
				"status": {
					"type": "enum",
					"description": "The status of the token. This attribute is readonly",
					"enum": [
						"ACTIVE",
						"ARCHIVED",
						"EXPIRED"
					],
					"x-readonly": "true"
				},
				"restPermissions": {
					"type": "array",
					"description": "The fine-grained permissions associated with this token",
					"items": {
						"$ref": "#/definitions/Permission"
					}
				},
				"cookie": {
					"type": "string",
					"description": "Cookie associated with the token which should be sent by the client to the server every time a request is made",
					"maxLength": 22,
					"x-null-on-create": "true"
				},
				"subjectId": {
					"type": "string",
					"description": "The subject identifer in Active Directory of the user that obtained this session token. Not applicable to permanent tokens",
					"maxLength": 50
				},
				"type": {
					"type": "enum",
					"description": "The type of the token.",
					"enum": [
						"SESSION",
						"PERMANENT"
					]
				},
				"tenant": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The tenant associated with this registration - derived from the application and user. This attribute is readonly",
					"x-readonly": "true"
				}
			}
		},
		"PageOfTokens": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of registrations"
				},
				"items": {
					"type": "array",
					"description": "The collections of registrations",
					"items": {
						"$ref": "#/definitions/Token"
					}
				}
			}
		},
		"User": {
			"properties": {
				"href": {
					"type": "string",
					"description": "The location of the user. This attribute is readonly",
					"x-readonly": "true"
				},
				"allowedPermissions": {
					"type": "string",
					"description": "The permissions permitted for the requester on this object. This attribute is readonly",
					"x-readonly": "true"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier of the User. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"userId": {
					"type": "string",
					"required": true,
					"description": "An externally provided unique identifier for the user.  This a case insensitive fieldand is mandatory when creating a user",
					"maxLength": 100,
					"x-mandatory-on-create": true,
					"x-sortable": "true"
				},
				"externalName": {
					"type": "string",
					"description": "A non-unique identifier of the user.",
					"maxLength": 100
				},
				"email": {
					"type": "string",
					"description": "The email address of the user.",
					"maxLength": 100
				},
				"firstName": {
					"type": "string",
					"description": "The first name of the user.",
					"maxLength": 50
				},
				"lastName": {
					"type": "string",
					"description": "The last name of the user.",
					"maxLength": 50
				},
				"middleName": {
					"type": "string",
					"description": "The middle name of the user.",
					"maxLength": 50
				},
				"prefix": {
					"type": "string",
					"description": "The user's title or prefix.",
					"maxLength": 50
				},
				"suffix": {
					"type": "string",
					"description": "The user's suffix.",
					"maxLength": 50
				},
				"primaryPhone": {
					"type": "string",
					"description": "The user's primary phone number.",
					"maxLength": 50
				},
				"primaryPhoneCountryCode": {
					"type": "string",
					"description": "The country code of the user's primary phone number.",
					"maxLength": 10
				},
				"alternatePhone": {
					"type": "string",
					"description": "The user's alternative phone number.",
					"maxLength": 50
				},
				"alternatePhoneCountryCode": {
					"type": "string",
					"description": "The country code of the user's alternative phone number.",
					"maxLength": 10
				},
				"addressLine1": {
					"type": "string",
					"description": "The first line of the user's address.",
					"maxLength": 200
				},
				"addressLine2": {
					"type": "string",
					"description": "The second line of the user's address.",
					"maxLength": 200
				},
				"city": {
					"type": "string",
					"description": "The city of the user's address.",
					"maxLength": 50
				},
				"state": {
					"type": "string",
					"description": "The state of the user's address.",
					"maxLength": 50
				},
				"postalCode": {
					"type": "string",
					"description": "The user's postal code.",
					"maxLength": 50
				},
				"country": {
					"type": "string",
					"description": "The country of the user's postal address.",
					"maxLength": 50
				},
				"archived": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the user was archived within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"created": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the user was created within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-sortable": "true",
					"x-readonly": "true"
				},
				"updated": {
					"type": "string",
					"format": "dateTime",
					"description": "The date and time the user was last updated within the system. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"language": {
					"type": "string",
					"description": "The primary/native spoken language of the user."
				},
				"pin": {
					"type": "string",
					"description": "The PIN or pass code for the user.  This field is never returned by the system.",
					"x-writeonly": "true"
				},
				"face": {
					"$ref": "#/definitions/FaceData",
					"description": "The photograph of the user.  This is only returned if an explicit GET of the user is made. This attribute is readonly",
					"x-readonly": "true"
				},
				"voiceTextDependent": {
					"type": "array",
					"description": "The voice utterances of the user.  This is only returned if an explicit GET of the user is made. This attribute is readonly",
					"items": {
						"$ref": "#/definitions/VoiceData"
					},
					"x-readonly": "true"
				},
				"voiceTextPromptedDigits": {
					"type": "array",
					"description": "The voice utterances of the user.  This is only returned if an explicit get of the user is made. This attribute is readonly",
					"items": {
						"$ref": "#/definitions/VoiceData"
					},
					"x-readonly": "true"
				},
				"pinEnrolled": {
					"type": "boolean",
					"description": "Indicates that the user has registered a PIN or pass code. This attribute is readonly",
					"x-readonly": "true"
				},
				"faceEnrolled": {
					"type": "boolean",
					"description": "Indicates that the user has registered a photograph. This attribute is readonly",
					"x-readonly": "true"
				},
				"voiceEnrolled": {
					"type": "boolean",
					"description": "Indicates that the user has registered voice samples for text dependent matching. This attribute is readonly",
					"x-readonly": "true"
				},
				"voiceDigitsEnrolled": {
					"type": "boolean",
					"description": "Indicates that the user has registered voice samples. This attribute is readonly",
					"x-readonly": "true"
				},
				"secretQuestions": {
					"type": "array",
					"description": "The secret questions selected by the user and the corresponding answers.",
					"items": {
						"$ref": "#/definitions/SecretQuestion"
					}
				},
				"failedVerificationCount": {
					"type": "integer",
					"format": "int64",
					"description": "The number of failed verifications since the last successful verification. This attribute is readonly",
					"x-readonly": "true"
				},
				"lockedUntil": {
					"type": "string",
					"format": "dateTime",
					"description": "If set, the date and time the user is locked within the system.  If a user is locked, the user cannot authenticate. This attribute is readonly",
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"accountUnlockedCount": {
					"type": "integer",
					"format": "int64",
					"description": "The number of times the account has been unlocked since the last successful verification. This attribute is readonly",
					"x-readonly": "true"
				},
				"status": {
					"type": "enum",
					"description": "Specifies the state of the user. This attribute is readonly",
					"enum": [
						"ACTIVE",
						"SUSPENDED",
						"BLOCKED",
						"ARCHIVED"
					],
					"x-null-on-create": "true",
					"x-readonly": "true"
				},
				"tenant": {
					"$ref": "#/definitions/ResourceLink",
					"description": "The tenant containing this user. This attribute is readonly",
					"x-readonly": "true"
				},
				"applications": {
					"$ref": "#/definitions/PageOfResourcesLink",
					"description": "The applications associated with this user. This attribute is readonly and can be expanded when getting either a single user",
					"x-expandable-in-instance": "true",
					"x-readonly": "true"
				},
				"registrations": {
					"$ref": "#/definitions/PageOfResourcesLink",
					"description": "The registrations associated with this user. This attribute is readonly and can be expanded when getting either a single user",
					"x-expandable-in-instance": "true",
					"x-readonly": "true"
				},
				"authenticators": {
					"$ref": "#/definitions/PageOfResourcesLink",
					"description": "The authenticators associated with this user. This attribute is readonly and can be expanded when getting either a single user",
					"x-expandable-in-instance": "true",
					"x-readonly": "true"
				},
				"authenticationRequests": {
					"$ref": "#/definitions/PageOfResourcesLink",
					"description": "The authentication requests associated with this user. This attribute is readonly and can be expanded when getting either a single user",
					"x-expandable-in-instance": "true",
					"x-readonly": "true"
				},
				"sponsorships": {
					"$ref": "#/definitions/PageOfResourcesLink",
					"description": "The sponsorships associated with this user. This attribute is readonly",
					"x-readonly": "true"
				}
			}
		},
		"FaceData": {
			"properties": {
				"format": {
					"$ref": "#/definitions/ImageType",
					"description": "The format of the face image"
				},
				"sensitiveData": {
					"$ref": "#/definitions/DataHolder",
					"description": "The raw data of the face image of the user"
				}
			}
		},
		"ImageType": {
			"type": "enum",
			"description": "The format of the image.",
			"enum": [
				"JPG",
				"BMP",
				"JPG_2000",
				"OTHER"
			]
		},
		"VoiceData": {
			"properties": {
				"format": {
					"$ref": "#/definitions/VoiceFormat",
					"description": "The format of the utterance"
				},
				"utterance": {
					"type": "string",
					"description": "The phrase spoken by the user"
				},
				"backgroundModelName": {
					"type": "string",
					"description": "The name of the background model associated with this voice data."
				},
				"sensitiveData": {
					"$ref": "#/definitions/DataHolder",
					"description": "The raw data spoken by the user"
				}
			}
		},
		"VoiceFormat": {
			"type": "enum",
			"description": "The data format of the voice sample.",
			"enum": [
				"WAV",
				"AIFF",
				"WAVPACK",
				"AMR",
				"OTHER"
			]
		},
		"SecretQuestion": {
			"properties": {
				"secretQuestion": {
					"type": "string",
					"description": "The secret question selected or provided by the user."
				},
				"secretAnswer": {
					"type": "string",
					"description": "The answer to the secret question provided by the user."
				}
			}
		},
		"PageOfUsers": {
			"properties": {
				"metadata": {
					"$ref": "#/definitions/PageMetadata",
					"description": "Current page, page size and total count of this collection"
				},
				"paging": {
					"$ref": "#/definitions/PagePaging",
					"description": "Locations of the first, previous, next and last pages of this collection - null if already on that page"
				},
				"href": {
					"type": "string",
					"description": "The location of this page of users"
				},
				"items": {
					"type": "array",
					"description": "The collection of users",
					"items": {
						"$ref": "#/definitions/User"
					}
				}
			}
		}
	}
}